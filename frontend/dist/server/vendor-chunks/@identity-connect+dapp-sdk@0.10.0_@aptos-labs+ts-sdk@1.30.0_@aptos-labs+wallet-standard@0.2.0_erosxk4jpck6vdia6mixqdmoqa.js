"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@identity-connect+dapp-sdk@0.10.0_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2.0_erosxk4jpck6vdia6mixqdmoqa";
exports.ids = ["vendor-chunks/@identity-connect+dapp-sdk@0.10.0_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2.0_erosxk4jpck6vdia6mixqdmoqa"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@identity-connect+dapp-sdk@0.10.0_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2.0_erosxk4jpck6vdia6mixqdmoqa/node_modules/@identity-connect/dapp-sdk/dist/index.mjs":
/*!************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@identity-connect+dapp-sdk@0.10.0_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2.0_erosxk4jpck6vdia6mixqdmoqa/node_modules/@identity-connect/dapp-sdk/dist/index.mjs ***!
  \************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACDappClient: () => (/* binding */ ACDappClient),\n/* harmony export */   ACKeylessClient: () => (/* binding */ ACKeylessClient),\n/* harmony export */   DAPP_PAIRINGS_WINDOW_STORAGE_KEY: () => (/* binding */ DAPP_PAIRINGS_WINDOW_STORAGE_KEY),\n/* harmony export */   ICDappClient: () => (/* binding */ ICDappClient),\n/* harmony export */   windowStateAccessors: () => (/* binding */ windowStateAccessors)\n/* harmony export */ });\n/* harmony import */ var _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aptos-connect/wallet-api */ \"(ssr)/./node_modules/.pnpm/@aptos-connect+wallet-api@0.1.5_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2.0_aptos@1.21.0/node_modules/@aptos-connect/wallet-api/dist/index.mjs\");\n/* harmony import */ var _aptos_connect_web_transport__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aptos-connect/web-transport */ \"(ssr)/./node_modules/.pnpm/@aptos-connect+web-transport@0.1.0_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2._rbkqx4le5iilq7vcymgqhcdg6y/node_modules/@aptos-connect/web-transport/dist/index.mjs\");\n/* harmony import */ var _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aptos-labs/ts-sdk */ \"(ssr)/./node_modules/.pnpm/@aptos-labs+ts-sdk@1.30.0/node_modules/@aptos-labs/ts-sdk/dist/esm/index.mjs\");\n/* harmony import */ var _identity_connect_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @identity-connect/api */ \"(ssr)/./node_modules/.pnpm/@identity-connect+api@0.7.0/node_modules/@identity-connect/api/dist/index.mjs\");\n/* harmony import */ var _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @identity-connect/crypto */ \"(ssr)/./node_modules/.pnpm/@identity-connect+crypto@0.2.4_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2.0_aptos@1.21.0/node_modules/@identity-connect/crypto/dist/index.mjs\");\n/* harmony import */ var _identity_connect_wallet_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @identity-connect/wallet-api */ \"(ssr)/./node_modules/.pnpm/@identity-connect+wallet-api@0.1.1_@aptos-labs+ts-sdk@1.30.0_aptos@1.21.0/node_modules/@identity-connect/wallet-api/dist/index.mjs\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/.pnpm/axios@1.7.9/node_modules/axios/lib/axios.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/.pnpm/axios@1.7.9/node_modules/axios/index.js\");\n// src/ACDappClient.ts\n\n\n\n\n\n\n// src/constants.ts\nvar DEFAULT_FRONTEND_URL = \"https://aptosconnect.app\";\n\n// src/conversion.ts\n\nfunction convertToSerializableArgument(argument) {\n  if (argument === void 0 || argument === null) {\n    return argument;\n  }\n  if (Array.isArray(argument)) {\n    return argument.map((subArgument) => convertToSerializableArgument(subArgument));\n  }\n  if (typeof argument === \"string\" || typeof argument === \"number\" || typeof argument === \"boolean\" || argument instanceof Uint8Array) {\n    return argument;\n  }\n  if (typeof argument === \"bigint\") {\n    return argument.toString();\n  }\n  if (argument instanceof ArrayBuffer) {\n    return new Uint8Array(argument);\n  }\n  if (\"values\" in argument) {\n    return argument.values.map((subArgument) => convertToSerializableArgument(subArgument));\n  }\n  if (\"data\" in argument) {\n    return _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.AccountAddress.from(argument.data).toString();\n  }\n  if (argument.value === void 0) {\n    return void 0;\n  }\n  if (typeof argument.value === \"string\" || typeof argument.value === \"number\" || typeof argument.value === \"boolean\" || argument.value instanceof Uint8Array) {\n    return argument.value;\n  }\n  if (typeof argument.value === \"bigint\") {\n    return argument.value.toString();\n  }\n  throw new Error(\"Unexpected argument\");\n}\nfunction normalizePayloadForIC(payload, aptosConfig) {\n  if (\"bcsToBytes\" in payload) {\n    return payload;\n  }\n  if (\"bytecode\" in payload) {\n    return (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.generateTransactionPayload)(payload);\n  }\n  if (aptosConfig) {\n    return payload.abi !== void 0 ? (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.generateTransactionPayloadWithABI)({ ...payload, abi: payload.abi }) : (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.generateTransactionPayload)({ aptosConfig, ...payload });\n  }\n  const entryFunctionPayload = {\n    arguments: payload.functionArguments.map(convertToSerializableArgument),\n    function: payload.function,\n    type: \"entry_function_payload\",\n    type_arguments: (payload.typeArguments ?? []).map((ta) => ta.toString())\n  };\n  return \"multisigAddress\" in payload ? {\n    multisig_address: _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.AccountAddress.from(payload.multisigAddress).toString(),\n    transaction_payload: entryFunctionPayload,\n    type: \"multisig_payload\"\n  } : entryFunctionPayload;\n}\n\n// src/PairingClient.ts\n\n\n\n\n\n\n// src/errors.ts\nvar SignatureRequestError = class _SignatureRequestError extends Error {\n  constructor(status) {\n    super(status);\n    this.name = \"SignatureRequestError\";\n    Object.setPrototypeOf(this, _SignatureRequestError.prototype);\n  }\n};\nvar UnexpectedSignatureResponseError = class _UnexpectedSignatureResponseError extends Error {\n  constructor(missingFields) {\n    const message = `Missing the following fields: ${missingFields.join(\", \")}`;\n    super(message);\n    this.name = \"UnexpectedSignatureResponseError\";\n    Object.setPrototypeOf(this, _UnexpectedSignatureResponseError.prototype);\n  }\n};\nvar PairingExpiredError = class _PairingExpiredError extends Error {\n  constructor() {\n    super();\n    this.name = \"PairingExpiredError\";\n    Object.setPrototypeOf(this, _PairingExpiredError.prototype);\n  }\n};\nvar UnregisteredDappError = class _UnregisteredDappError extends Error {\n  constructor() {\n    super(\"Dapp ID is invalid or not associated with a registered Dapp.\");\n    this.name = \"UnregisteredDappError\";\n    Object.setPrototypeOf(this, _UnregisteredDappError.prototype);\n  }\n};\n\n// src/state.ts\nvar DAPP_PAIRINGS_WINDOW_STORAGE_KEY = \"icDappPairings\";\nvar windowStateAccessors = {\n  async get(address) {\n    const pairings = await this.getAll();\n    return pairings[address];\n  },\n  async getAll() {\n    const serialized = window.localStorage.getItem(DAPP_PAIRINGS_WINDOW_STORAGE_KEY);\n    return serialized ? JSON.parse(serialized) : {};\n  },\n  async update(address, pairing) {\n    const pairings = await this.getAll();\n    if (pairing === void 0) {\n      delete pairings[address];\n    } else {\n      pairings[address] = pairing;\n    }\n    const newSerialized = JSON.stringify(pairings);\n    window.localStorage.setItem(DAPP_PAIRINGS_WINDOW_STORAGE_KEY, newSerialized);\n  }\n};\n\n// src/utils.ts\nvar SIGN_MESSAGE_RESPONSE_REQUIRED_FIELDS = [\n  \"address\",\n  \"application\",\n  \"chainId\",\n  \"fullMessage\",\n  \"message\",\n  \"nonce\",\n  \"prefix\",\n  \"signature\"\n];\nfunction validateSignMessageResponse(response) {\n  const providedFields = new Set(Object.keys(response));\n  const missingFields = SIGN_MESSAGE_RESPONSE_REQUIRED_FIELDS.filter((field) => !providedFields.has(field));\n  if (missingFields.length > 0) {\n    throw new UnexpectedSignatureResponseError(missingFields);\n  }\n}\nvar SIGN_AND_SUBMIT_TRANSACTION_RESPONSE_REQUIRED_FIELDS = [\"hash\"];\nfunction validateSignAndSubmitTransactionResponse(response) {\n  const providedFields = new Set(Object.keys(response));\n  const missingFields = SIGN_AND_SUBMIT_TRANSACTION_RESPONSE_REQUIRED_FIELDS.filter(\n    (field) => !providedFields.has(field)\n  );\n  if (missingFields.length > 0) {\n    throw new UnexpectedSignatureResponseError(missingFields);\n  }\n}\n\n// src/PairingClient.ts\nvar API_VERSION = \"0.2.0\";\nvar SIGNING_REQUEST_POLLING_INTERVAL = 2500;\nvar SEQUENCE_NUMBER_MISMATCH_PATTERN = /^Sequence number mismatch, expected (?:\\S+ to be )?(\\d+)/;\nasync function waitFor(milliseconds) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, milliseconds);\n  });\n}\nasync function withRetries(requestFn, onError, retries = 1) {\n  for (let i = 0; i < retries; i += 1) {\n    try {\n      return await requestFn();\n    } catch (err) {\n      onError(err);\n    }\n  }\n  return requestFn();\n}\nvar ACPairingClient = class {\n  constructor({\n    accessors = windowStateAccessors,\n    axiosConfig,\n    defaultNetworkName = _identity_connect_api__WEBPACK_IMPORTED_MODULE_3__.NetworkName.MAINNET\n  } = {}) {\n    // endregion\n    this.onDisconnectListeners = /* @__PURE__ */ new Set();\n    this.accessors = accessors;\n    this.defaultNetworkName = defaultNetworkName;\n    this.axiosInstance = axios__WEBPACK_IMPORTED_MODULE_6__[\"default\"].create({\n      baseURL: DEFAULT_FRONTEND_URL,\n      ...axiosConfig\n    });\n    const isClientSideRendering = typeof window !== \"undefined\";\n    this.initPromise = isClientSideRendering ? this.syncFirstPairing() : void 0;\n  }\n  async getPairing(id) {\n    const response = await this.axiosInstance.get(`v1/pairing/${id}/`);\n    return response.data.data.pairing;\n  }\n  async syncFirstPairing() {\n    const pairings = await this.accessors.getAll();\n    const firstPairing = Object.values(pairings)[0];\n    if (firstPairing === void 0) {\n      return;\n    }\n    try {\n      const { dappSpecificWallet, maxDappSequenceNumber } = await this.getPairing(firstPairing.pairingId);\n      await this.accessors.update(firstPairing.accountAddress, {\n        ...firstPairing,\n        currSequenceNumber: maxDappSequenceNumber,\n        dappWalletId: dappSpecificWallet?.id\n      });\n    } catch (err) {\n      await this.accessors.update(firstPairing.accountAddress, void 0);\n    }\n  }\n  async createSigningRequest(pairing, type, networkName, requestBody) {\n    const dappEd25519SecretKey = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decodeBase64)(pairing.dappEd25519SecretKeyB64);\n    const dappEd25519PublicKey = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decodeBase64)(pairing.dappEd25519PublicKeyB64);\n    const accountTransportEd25519PublicKey = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decodeBase64)(pairing.accountTransportEd25519PublicKeyB64);\n    let sequenceNumber = pairing.currSequenceNumber + 1;\n    return withRetries(\n      async () => {\n        const requestEnvelope = await (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.encryptAndSignEnvelope)(\n          (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.toKey)(dappEd25519SecretKey, _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.KeyTypes.Ed25519SecretKey),\n          (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.toKey)(dappEd25519PublicKey, _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.KeyTypes.Ed25519PublicKey),\n          (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.toKey)(accountTransportEd25519PublicKey, _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.KeyTypes.Ed25519PublicKey),\n          sequenceNumber,\n          { apiVersion: API_VERSION, networkName, requestType: type },\n          requestBody\n        );\n        const response = await this.axiosInstance.post(\n          `v1/pairing/${pairing.pairingId}/signing-request/`,\n          requestEnvelope\n        );\n        await this.accessors.update(pairing.accountAddress, {\n          ...pairing,\n          currSequenceNumber: sequenceNumber\n        });\n        return response.data.data.signingRequest;\n      },\n      (err) => {\n        if ((0,axios__WEBPACK_IMPORTED_MODULE_7__.isAxiosError)(err)) {\n          const errorMessage = err.response?.data?.message;\n          const expectedSequenceNumber = errorMessage?.match(SEQUENCE_NUMBER_MISMATCH_PATTERN)?.[1];\n          if (expectedSequenceNumber !== void 0) {\n            sequenceNumber = Number(expectedSequenceNumber);\n            return;\n          }\n        }\n        throw err;\n      }\n    );\n  }\n  async getSigningRequest(id) {\n    const response = await this.axiosInstance.get(\n      `v1/signing-request/${id}/`,\n      {\n        validateStatus: (status) => status === 200 || status === 404\n      }\n    );\n    return response.data?.data?.signingRequest;\n  }\n  async deletePairing(pairingId, secretKey, publicKey) {\n    const requestEnvelope = await (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.encryptAndSignEnvelope)(\n      secretKey,\n      publicKey,\n      publicKey,\n      0,\n      // ignored\n      {},\n      {}\n    );\n    await this.axiosInstance.post(\n      `v1/pairing/${pairingId}/delete/`,\n      requestEnvelope,\n      { validateStatus: (status) => status === 204 || status === 404 }\n    );\n  }\n  async cancelSigningRequest(pairing, id) {\n    const sequenceNumber = pairing.currSequenceNumber;\n    const dappEd25519SecretKey = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decodeBase64)(pairing.dappEd25519SecretKeyB64);\n    const dappEd25519PublicKey = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decodeBase64)(pairing.dappEd25519PublicKeyB64);\n    const accountTransportEd25519PublicKey = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decodeBase64)(pairing.accountTransportEd25519PublicKeyB64);\n    const requestEnvelope = await (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.encryptAndSignEnvelope)(\n      (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.toKey)(dappEd25519SecretKey, _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.KeyTypes.Ed25519SecretKey),\n      (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.toKey)(dappEd25519PublicKey, _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.KeyTypes.Ed25519PublicKey),\n      (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.toKey)(accountTransportEd25519PublicKey, _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.KeyTypes.Ed25519PublicKey),\n      sequenceNumber + 1,\n      {},\n      {}\n    );\n    const response = await this.axiosInstance.patch(\n      `v1/signing-request/${id}/cancel/`,\n      requestEnvelope\n    );\n    await this.accessors.update(pairing.accountAddress, {\n      ...pairing,\n      currSequenceNumber: sequenceNumber + 1\n    });\n    return response.data.data.signingRequest;\n  }\n  async signRequest(address, type, requestBody, { cancelToken, networkName } = {}) {\n    await this.initPromise;\n    const pairing = await this.accessors.get(address);\n    if (pairing === void 0) {\n      throw new Error(\"The requested account is not paired\");\n    }\n    let signingRequest;\n    try {\n      signingRequest = await this.createSigningRequest(\n        pairing,\n        type,\n        networkName || this.defaultNetworkName,\n        requestBody\n      );\n      while (signingRequest.status === \"PENDING\") {\n        await waitFor(SIGNING_REQUEST_POLLING_INTERVAL);\n        if (cancelToken?.cancelled) {\n          signingRequest.status = _identity_connect_api__WEBPACK_IMPORTED_MODULE_3__.SigningRequestStatus.CANCELLED;\n          break;\n        }\n        signingRequest = await this.getSigningRequest(signingRequest.id) ?? signingRequest;\n      }\n    } catch (err) {\n      if ((0,axios__WEBPACK_IMPORTED_MODULE_7__.isAxiosError)(err) && err.code === \"404\") {\n        await this.accessors.update(address, void 0);\n        for (const listener of this.onDisconnectListeners) {\n          listener(address);\n        }\n        throw new PairingExpiredError();\n      }\n      throw err;\n    }\n    if (signingRequest.status !== \"APPROVED\") {\n      throw new SignatureRequestError(signingRequest.status);\n    }\n    const decrypted = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decryptEnvelope)(\n      (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.toKey)((0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decodeBase64)(pairing.accountTransportEd25519PublicKeyB64), _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.KeyTypes.Ed25519PublicKey),\n      (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.toKey)((0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decodeBase64)(pairing.dappEd25519SecretKeyB64), _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.KeyTypes.Ed25519SecretKey),\n      signingRequest.responseEnvelope\n    );\n    return decrypted.privateMessage;\n  }\n  // region Public API\n  /**\n   * Requests a connection to an account (internally known as pairing).\n   * @returns either the address of the connected account, or undefined if the\n   * connection was cancelled.\n   */\n  async addPairing({ publicKey, secretKey }, finalizedPairing) {\n    await this.accessors.update(finalizedPairing.account.accountAddress, {\n      accountAddress: finalizedPairing.account.accountAddress,\n      accountAlias: finalizedPairing.account.userSubmittedAlias ?? void 0,\n      accountPublicKeyB64: finalizedPairing.account.publicKeyB64,\n      accountTransportEd25519PublicKeyB64: finalizedPairing.account.transportEd25519PublicKeyB64,\n      currSequenceNumber: finalizedPairing.maxDappSequenceNumber,\n      dappEd25519PublicKeyB64: (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.encodeBase64)(publicKey.key),\n      dappEd25519SecretKeyB64: (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.encodeBase64)(secretKey.key),\n      dappWalletId: finalizedPairing.dappSpecificWalletId,\n      pairingId: finalizedPairing.id\n    });\n  }\n  async disconnect(address) {\n    const pairing = await this.accessors.get(address);\n    if (pairing === void 0) {\n      throw new Error(\"The specified account is not paired\");\n    }\n    const dappEd25519SecretKey = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decodeBase64)(pairing.dappEd25519SecretKeyB64);\n    const dappEd25519PublicKey = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.decodeBase64)(pairing.dappEd25519PublicKeyB64);\n    await this.deletePairing(\n      pairing.pairingId,\n      (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.toKey)(dappEd25519SecretKey, _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.KeyTypes.Ed25519SecretKey),\n      (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.toKey)(dappEd25519PublicKey, _identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.KeyTypes.Ed25519PublicKey)\n    );\n    await this.accessors.update(address, void 0);\n    for (const listener of this.onDisconnectListeners) {\n      listener(address);\n    }\n  }\n  async signMessage(address, args, options) {\n    const response = await this.signRequest(\n      address,\n      _identity_connect_api__WEBPACK_IMPORTED_MODULE_3__.SigningRequestTypes.SIGN_MESSAGE,\n      args,\n      options\n    );\n    validateSignMessageResponse(response);\n    return response;\n  }\n  async signTransaction(address, args, options) {\n    const serializedRequestArgs = (0,_identity_connect_wallet_api__WEBPACK_IMPORTED_MODULE_5__.serializeSignTransactionRequestArgs)(args);\n    const serializedResponseArgs = await this.signRequest(address, _identity_connect_api__WEBPACK_IMPORTED_MODULE_3__.SigningRequestTypes.SIGN_TRANSACTION, serializedRequestArgs, options);\n    return (0,_identity_connect_wallet_api__WEBPACK_IMPORTED_MODULE_5__.deserializeSignTransactionResponseArgs)(serializedResponseArgs);\n  }\n  // endregion\n  async signAndSubmitTransaction(address, args, options) {\n    const serializedRequestArgs = (0,_identity_connect_wallet_api__WEBPACK_IMPORTED_MODULE_5__.serializeSignAndSubmitTransactionRequestArgs)(args);\n    try {\n      const responseArgs = await this.signRequest(address, _identity_connect_api__WEBPACK_IMPORTED_MODULE_3__.SigningRequestTypes.SIGN_AND_SUBMIT_TRANSACTION, serializedRequestArgs, options);\n      validateSignAndSubmitTransactionResponse(responseArgs);\n      return responseArgs;\n    } catch (e) {\n      if (e instanceof axios__WEBPACK_IMPORTED_MODULE_7__.AxiosError && e.response?.data?.message) {\n        throw new Error(e.response?.data?.message);\n      }\n      throw e;\n    }\n  }\n  async getConnectedAccounts() {\n    await this.initPromise;\n    const pairings = await this.accessors.getAll();\n    return Object.values(pairings).map(\n      ({ accountAddress, accountEd25519PublicKeyB64, accountPublicKeyB64 }) => ({\n        address: _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.AccountAddress.from(accountAddress),\n        publicKey: accountPublicKeyB64 !== void 0 ? (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.deserializePublicKeyB64)(accountPublicKeyB64) : (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.deserializeEd25519PublicKeyB64)(accountEd25519PublicKeyB64)\n      })\n    );\n  }\n  onDisconnect(listener) {\n    this.onDisconnectListeners.add(listener);\n    return () => this.onDisconnectListeners.delete(listener);\n  }\n};\n\n// src/ACDappClient.ts\nvar ACDappClient = class {\n  constructor({\n    backendBaseURL,\n    dappId,\n    dappImageURI,\n    dappName,\n    defaultNetworkName = _identity_connect_api__WEBPACK_IMPORTED_MODULE_3__.NetworkName.MAINNET,\n    frontendBaseURL = DEFAULT_FRONTEND_URL,\n    provider = \"google\"\n  } = {}) {\n    this.defaultNetworkName = defaultNetworkName;\n    this.dappInfo = {\n      domain: window.location.origin,\n      imageURI: dappImageURI,\n      name: dappName ?? document.title\n    };\n    this.transport = new _aptos_connect_web_transport__WEBPACK_IMPORTED_MODULE_1__.WebWalletTransport(frontendBaseURL, provider);\n    this.dappId = dappId;\n    this.pairingClient = new ACPairingClient({\n      axiosConfig: {\n        baseURL: backendBaseURL ?? frontendBaseURL\n      },\n      defaultNetworkName\n    });\n  }\n  // region Public API\n  async getKeylessAccounts() {\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.GetConnectedAccountsRequest.serialize(this.dappInfo);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.GetConnectedAccountsResponse.deserialize(serializedResponse);\n    return response.args;\n  }\n  async getIcAccounts() {\n    return this.pairingClient.getConnectedAccounts() ?? [];\n  }\n  async isIcAccount(address) {\n    const icAccounts = await this.getIcAccounts();\n    return icAccounts.find((account) => account.address.equals(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.AccountAddress.from(address))) !== void 0;\n  }\n  async getConnectedAccounts() {\n    const keylessAccounts = await this.getKeylessAccounts();\n    const icAccounts = await this.getIcAccounts();\n    return [...keylessAccounts, ...icAccounts];\n  }\n  async disconnect(address) {\n    if (await this.isIcAccount(address)) {\n      const stringAddress = _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.AccountAddress.from(address).toString();\n      await this.pairingClient.disconnect(stringAddress);\n    } else {\n      const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.DisconnectRequest.serialize(this.dappInfo);\n      await this.transport.sendRequest(serializedRequest);\n    }\n  }\n  async connect({\n    claimOptions,\n    preferredWalletName\n  } = {}) {\n    const dappKeypair = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.createEd25519KeyPair)();\n    const injectedPreferredWalletName = typeof window !== \"undefined\" ? window.AC_PREFERRED_WALLET_NAME : void 0;\n    const requestArgs = {\n      claimOptions,\n      dappEd25519PublicKeyB64: (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.encodeBase64)(dappKeypair.publicKey.key),\n      dappId: this.dappId,\n      preferredWalletName: preferredWalletName ?? injectedPreferredWalletName\n    };\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.ConnectRequest.serialize(this.dappInfo, requestArgs);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.ConnectResponse.deserialize(serializedResponse);\n    if (response.args.status === \"approved\") {\n      const { account, pairing } = response.args.args;\n      if (pairing) {\n        await this.pairingClient.addPairing(dappKeypair, pairing);\n      }\n      return (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.makeUserApproval)({ account });\n    }\n    return response.args;\n  }\n  async signMessage(args) {\n    const { signerAddress } = args;\n    if (await this.isIcAccount(signerAddress)) {\n      const { chainId } = args;\n      const network = (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.chainIdToNetwork)(chainId);\n      let message;\n      let nonce;\n      try {\n        message = new TextDecoder().decode(args.message);\n        nonce = new TextDecoder().decode(args.nonce);\n      } catch (err) {\n        throw new Error(\"Only UTF-8 encoded text is supported when using IC\");\n      }\n      const { fullMessage, signature: hexSignature } = await this.pairingClient.signMessage(\n        signerAddress.toString(),\n        {\n          address: true,\n          application: true,\n          chainId: true,\n          message,\n          nonce\n        },\n        { networkName: network }\n      );\n      const signatureBytes = _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.Hex.fromHexInput(hexSignature).toUint8Array();\n      const signature = signatureBytes.length === _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.Ed25519Signature.LENGTH ? new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.Ed25519Signature(signatureBytes) : _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.AnySignature.deserialize(new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.Deserializer(signatureBytes));\n      return (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.makeUserApproval)({\n        fullMessage,\n        signature\n      });\n    }\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignMessageRequest.serialize(this.dappInfo, args);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignMessageResponse.deserialize(serializedResponse);\n    return response.args;\n  }\n  async signTransaction(args) {\n    const normalizedArgs = \"transaction\" in args ? _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignTransactionRequest.normalizeArgs(args) : args;\n    const { signerAddress } = args;\n    if (await this.isIcAccount(signerAddress)) {\n      const {\n        expirationSecondsFromNow,\n        expirationTimestamp,\n        feePayer,\n        gasUnitPrice,\n        maxGasAmount,\n        network,\n        payload,\n        secondarySigners,\n        sender,\n        sequenceNumber\n      } = normalizedArgs;\n      if (feePayer !== void 0) {\n        throw new Error(\"Sponsored transaction not currently supported\");\n      }\n      if (secondarySigners && secondarySigners.length > 0) {\n        throw new Error(\"Multi-agent transactions not currently supported\");\n      }\n      if (!(\"bcsToBytes\" in payload)) {\n        throw new Error(\"Payload input format is only supported with Keyless accounts.\");\n      }\n      const responseArgs = await this.pairingClient.signTransaction(\n        signerAddress.toString(),\n        {\n          options: {\n            expirationSecondsFromNow,\n            expirationTimestamp,\n            gasUnitPrice,\n            maxGasAmount,\n            sender: sender?.address.toString(),\n            sequenceNumber: sequenceNumber !== void 0 ? Number(sequenceNumber) : void 0\n          },\n          payload\n        },\n        {\n          networkName: network\n        }\n      );\n      return (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.makeUserApproval)({\n        authenticator: responseArgs.accountAuthenticator,\n        rawTransaction: responseArgs.rawTxn\n      });\n    }\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignTransactionRequest.serialize(this.dappInfo, normalizedArgs);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignTransactionResponse.deserialize(serializedResponse);\n    return response.args;\n  }\n  async signAndSubmitTransaction(args) {\n    const { signerAddress } = args;\n    if (await this.isIcAccount(signerAddress)) {\n      const { expirationTimestamp, feePayer, gasUnitPrice, maxGasAmount, network } = args;\n      const aptosConfig = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.AptosConfig({ network });\n      let convertedArgs;\n      if (feePayer !== void 0) {\n        const payload = await normalizePayloadForIC(args.payload, aptosConfig);\n        const rawTxn = await (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.generateRawTransaction)({\n          aptosConfig,\n          feePayerAddress: feePayer.address,\n          options: {\n            gasUnitPrice,\n            maxGasAmount\n          },\n          payload,\n          sender: signerAddress\n        });\n        convertedArgs = {\n          feePayerAuthenticator: feePayer.authenticator,\n          rawTxn: new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_2__.FeePayerRawTransaction(rawTxn, [], feePayer.address)\n        };\n      } else {\n        const payload = normalizePayloadForIC(args.payload);\n        convertedArgs = {\n          options: {\n            expirationTimestamp,\n            gasUnitPrice,\n            maxGasAmount\n          },\n          payload\n        };\n      }\n      const { hash } = await this.pairingClient.signAndSubmitTransaction(signerAddress.toString(), convertedArgs, {\n        networkName: network\n      });\n      return (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.makeUserApproval)({ txnHash: hash });\n    }\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignAndSubmitTransactionRequest.serialize(this.dappInfo, args);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignAndSubmitTransactionResponse.deserialize(serializedResponse);\n    return response.args;\n  }\n  // endregion\n};\n\n// src/ICDappClient.ts\n\n\n\n// src/prompt.ts\nvar DEFAULT_PROMPT_SIZE = { height: 695, width: 465 };\nvar PROMPT_POLLER_INTERVAL = 500;\nfunction openPrompt(url, size = DEFAULT_PROMPT_SIZE) {\n  const { height, width } = size;\n  const options = {\n    height,\n    left: window.screenLeft + Math.round((window.outerWidth - width) / 2),\n    popup: true,\n    top: window.screenTop + Math.round((window.outerHeight - height) / 2),\n    width\n  };\n  const strOptions = Object.entries(options).map(([key, value]) => `${key}=${JSON.stringify(value)}`).reduce((acc, entry) => `${acc}, ${entry}`);\n  const href = url instanceof URL ? url.href : url;\n  const promptWindow = window.open(href, void 0, strOptions);\n  if (promptWindow === null) {\n    throw new Error(\"Couldn't open prompt\");\n  }\n  return promptWindow;\n}\nasync function waitForPromptResponse(promptWindow) {\n  return new Promise((resolve) => {\n    const listeners = {\n      onMessage: (message) => {\n        if (message.source !== promptWindow) {\n          return;\n        }\n        window.removeEventListener(\"message\", listeners.onMessage);\n        clearTimeout(listeners.promptPollerId);\n        resolve({\n          args: message.data,\n          status: \"approved\"\n        });\n      },\n      promptPollerId: setInterval(() => {\n        if (promptWindow.closed) {\n          window.removeEventListener(\"message\", listeners.onMessage);\n          clearTimeout(listeners.promptPollerId);\n          resolve({\n            status: \"dismissed\"\n          });\n        }\n      }, PROMPT_POLLER_INTERVAL)\n    };\n    window.addEventListener(\"message\", listeners.onMessage);\n  });\n}\n\n// src/ICDappClient.ts\nvar ICDappClient = class extends ACPairingClient {\n  constructor(dappId, { frontendBaseURL = DEFAULT_FRONTEND_URL, ...pairingClientConfig } = {}) {\n    super(pairingClientConfig);\n    this.dappId = dappId;\n    this.frontendBaseURL = frontendBaseURL;\n  }\n  async createPairingRequest(dappEd25519PublicKeyB64) {\n    try {\n      const response = await this.axiosInstance.post(\"v1/pairing/\", {\n        dappEd25519PublicKeyB64,\n        dappId: this.dappId\n      });\n      return response.data.data.pairing;\n    } catch (err) {\n      if ((0,axios__WEBPACK_IMPORTED_MODULE_7__.isAxiosError)(err) && err.response?.data?.message === \"Dapp not found\") {\n        throw new UnregisteredDappError();\n      }\n      throw err;\n    }\n  }\n  // region Public API\n  /**\n   * Requests a connection to an account (internally known as pairing).\n   * @returns either the address of the connected account, or undefined if the\n   * connection was cancelled.\n   */\n  async connect() {\n    const { publicKey, secretKey } = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.createEd25519KeyPair)();\n    const dappEd25519PublicKeyB64 = (0,_identity_connect_crypto__WEBPACK_IMPORTED_MODULE_4__.encodeBase64)(publicKey.key);\n    const url = new URL(`${this.frontendBaseURL}/pairing`);\n    const promptWindow = await openPrompt(url.href);\n    let pairingId;\n    try {\n      const pendingPairing = await this.createPairingRequest(dappEd25519PublicKeyB64);\n      pairingId = pendingPairing.id;\n    } catch (err) {\n      promptWindow.close();\n      throw err;\n    }\n    url.searchParams.set(\"pairingId\", pairingId);\n    promptWindow.location.href = url.href;\n    const promptResponse = await waitForPromptResponse(promptWindow);\n    if (promptResponse.status === \"dismissed\") {\n      void this.deletePairing(pairingId, secretKey, publicKey);\n      return void 0;\n    }\n    const finalizedPairing = promptResponse.args;\n    await this.addPairing({ publicKey, secretKey }, finalizedPairing);\n    return finalizedPairing.account.accountAddress;\n  }\n  async offboard(address) {\n    const pairing = await this.accessors.get(address);\n    if (pairing === void 0) {\n      throw new Error(\"This account is not paired\");\n    }\n    const walletId = pairing.dappWalletId;\n    if (walletId === void 0) {\n      throw new Error(\"This account cannot be offboarded\");\n    }\n    const url = new URL(`${this.frontendBaseURL}/offboarding?walletId=${walletId}`);\n    const promptWindow = openPrompt(url);\n    const response = await waitForPromptResponse(promptWindow);\n    if (response.status === \"approved\" && response.args.offboarded) {\n      this.disconnect(address);\n      return true;\n    }\n    return false;\n  }\n  // endregion\n};\n\n// src/KeylessClient.ts\n\n\n\nvar ACKeylessClient = class {\n  constructor({\n    dappImageURI,\n    dappName,\n    defaultNetworkName = _identity_connect_api__WEBPACK_IMPORTED_MODULE_3__.NetworkName.MAINNET,\n    frontendBaseURL = DEFAULT_FRONTEND_URL,\n    provider = \"google\"\n  } = {}) {\n    this.defaultNetworkName = defaultNetworkName;\n    this.dappInfo = {\n      domain: window.location.origin,\n      imageURI: dappImageURI,\n      name: dappName ?? document.title\n    };\n    this.transport = new _aptos_connect_web_transport__WEBPACK_IMPORTED_MODULE_1__.WebWalletTransport(frontendBaseURL, provider);\n  }\n  // region Public API\n  async isConnected() {\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.IsConnectedRequest.serialize(this.dappInfo);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.IsConnectedResponse.deserialize(serializedResponse);\n    return response.args;\n  }\n  async getConnectedAccounts() {\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.GetConnectedAccountsRequest.serialize(this.dappInfo);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.GetConnectedAccountsResponse.deserialize(serializedResponse);\n    return response.args;\n  }\n  async disconnect() {\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.DisconnectRequest.serialize(this.dappInfo);\n    await this.transport.sendRequest(serializedRequest);\n  }\n  async connect() {\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.ConnectRequest.serialize(this.dappInfo);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.ConnectResponse.deserialize(serializedResponse);\n    return response.args;\n  }\n  async signMessage(args) {\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignMessageRequest.serialize(this.dappInfo, args);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignMessageResponse.deserialize(serializedResponse);\n    return response.args;\n  }\n  async signTransaction(args) {\n    const normalizedArgs = \"transaction\" in args ? _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignTransactionRequest.normalizeArgs(args) : args;\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignTransactionRequest.serialize(this.dappInfo, normalizedArgs);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignTransactionResponse.deserialize(serializedResponse);\n    return response.args;\n  }\n  async signAndSubmitTransaction(args) {\n    const serializedRequest = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignAndSubmitTransactionRequest.serialize(this.dappInfo, args);\n    const serializedResponse = await this.transport.sendRequest(serializedRequest);\n    const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignAndSubmitTransactionResponse.deserialize(serializedResponse);\n    return response.args;\n  }\n  // endregion\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@identity-connect+dapp-sdk@0.10.0_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2.0_erosxk4jpck6vdia6mixqdmoqa/node_modules/@identity-connect/dapp-sdk/dist/index.mjs\n");

/***/ })

};
;