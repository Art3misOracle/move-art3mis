"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@identity-connect+crypto@0.2.4_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2.0_aptos@1.21.0";
exports.ids = ["vendor-chunks/@identity-connect+crypto@0.2.4_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2.0_aptos@1.21.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@identity-connect+crypto@0.2.4_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2.0_aptos@1.21.0/node_modules/@identity-connect/crypto/dist/index.mjs":
/*!*****************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@identity-connect+crypto@0.2.4_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2.0_aptos@1.21.0/node_modules/@identity-connect/crypto/dist/index.mjs ***!
  \*****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountConnectionAction: () => (/* binding */ AccountConnectionAction),\n/* harmony export */   DecryptionError: () => (/* binding */ DecryptionError),\n/* harmony export */   EncryptionEnvelopeError: () => (/* binding */ EncryptionEnvelopeError),\n/* harmony export */   EnvelopeMessageMismatchError: () => (/* binding */ EnvelopeMessageMismatchError),\n/* harmony export */   KeyTypes: () => (/* binding */ KeyTypes),\n/* harmony export */   REQUIRED_FIELDS: () => (/* binding */ REQUIRED_FIELDS),\n/* harmony export */   SIGNATURE_PREFIX: () => (/* binding */ SIGNATURE_PREFIX),\n/* harmony export */   aptosAccountToEd25519Keypair: () => (/* binding */ aptosAccountToEd25519Keypair),\n/* harmony export */   aptosAccountToSerializedInfo: () => (/* binding */ aptosAccountToSerializedInfo),\n/* harmony export */   concatUint8array: () => (/* binding */ concatUint8array),\n/* harmony export */   constructMetadata: () => (/* binding */ constructMetadata),\n/* harmony export */   convertEd25519PublicKeyToX25519PublicKey: () => (/* binding */ convertEd25519PublicKeyToX25519PublicKey),\n/* harmony export */   convertEd25519SecretKeyToX25519SecretKey: () => (/* binding */ convertEd25519SecretKeyToX25519SecretKey),\n/* harmony export */   createEd25519KeyPair: () => (/* binding */ createEd25519KeyPair),\n/* harmony export */   createSerializedAccountInfo: () => (/* binding */ createSerializedAccountInfo),\n/* harmony export */   createX25519KeyPair: () => (/* binding */ createX25519KeyPair),\n/* harmony export */   dangerouslyEncryptAndSignEnvelopeUnvalidated: () => (/* binding */ dangerouslyEncryptAndSignEnvelopeUnvalidated),\n/* harmony export */   decodeBase64: () => (/* binding */ decodeBase64),\n/* harmony export */   decryptEnvelope: () => (/* binding */ decryptEnvelope),\n/* harmony export */   decryptMessage: () => (/* binding */ decryptMessage),\n/* harmony export */   decryptMessageDirect: () => (/* binding */ decryptMessageDirect),\n/* harmony export */   decryptObject: () => (/* binding */ decryptObject),\n/* harmony export */   decryptObjectDirect: () => (/* binding */ decryptObjectDirect),\n/* harmony export */   decryptSerializedEncryptionResult: () => (/* binding */ decryptSerializedEncryptionResult),\n/* harmony export */   decryptSerializedEncryptionResultDirect: () => (/* binding */ decryptSerializedEncryptionResultDirect),\n/* harmony export */   deriveAccountTransportEd25519Keypair: () => (/* binding */ deriveAccountTransportEd25519Keypair),\n/* harmony export */   deserializeEd25519PublicKeyB64: () => (/* binding */ deserializeEd25519PublicKeyB64),\n/* harmony export */   deserializeEd25519SignatureB64: () => (/* binding */ deserializeEd25519SignatureB64),\n/* harmony export */   deserializeEncryptionResult: () => (/* binding */ deserializeEncryptionResult),\n/* harmony export */   deserializePublicKeyB64: () => (/* binding */ deserializePublicKeyB64),\n/* harmony export */   deserializeSignatureB64: () => (/* binding */ deserializeSignatureB64),\n/* harmony export */   deserializeTransportEnvelope: () => (/* binding */ deserializeTransportEnvelope),\n/* harmony export */   ed25519KeypairFromSecret: () => (/* binding */ ed25519KeypairFromSecret),\n/* harmony export */   encodeBase64: () => (/* binding */ encodeBase64),\n/* harmony export */   encryptAndSignEnvelope: () => (/* binding */ encryptAndSignEnvelope),\n/* harmony export */   encryptMessage: () => (/* binding */ encryptMessage),\n/* harmony export */   encryptMessageDirect: () => (/* binding */ encryptMessageDirect),\n/* harmony export */   encryptObject: () => (/* binding */ encryptObject),\n/* harmony export */   encryptObjectDirect: () => (/* binding */ encryptObjectDirect),\n/* harmony export */   ensureMetadataFields: () => (/* binding */ ensureMetadataFields),\n/* harmony export */   ensurePrivatePublicFieldsDisjoint: () => (/* binding */ ensurePrivatePublicFieldsDisjoint),\n/* harmony export */   hashAndVerifySignature: () => (/* binding */ hashAndVerifySignature),\n/* harmony export */   keypairToEd25519: () => (/* binding */ keypairToEd25519),\n/* harmony export */   keypairToX25519: () => (/* binding */ keypairToX25519),\n/* harmony export */   makeEd25519SecretKeySignCallbackNoDomainSeparation: () => (/* binding */ makeEd25519SecretKeySignCallbackNoDomainSeparation),\n/* harmony export */   messageHash: () => (/* binding */ messageHash),\n/* harmony export */   publicKeyB64FromEd25519PublicKeyB64: () => (/* binding */ publicKeyB64FromEd25519PublicKeyB64),\n/* harmony export */   serializeEncryptionResult: () => (/* binding */ serializeEncryptionResult),\n/* harmony export */   serializePublicKeyB64: () => (/* binding */ serializePublicKeyB64),\n/* harmony export */   serializeSignatureB64: () => (/* binding */ serializeSignatureB64),\n/* harmony export */   signWithEd25519SecretKey: () => (/* binding */ signWithEd25519SecretKey),\n/* harmony export */   toKey: () => (/* binding */ toKey),\n/* harmony export */   verifyEnvelopeSignature: () => (/* binding */ verifyEnvelopeSignature),\n/* harmony export */   verifySignature: () => (/* binding */ verifySignature)\n/* harmony export */ });\n/* harmony import */ var _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aptos-labs/ts-sdk */ \"(ssr)/./node_modules/.pnpm/@aptos-labs+ts-sdk@1.30.0/node_modules/@aptos-labs/ts-sdk/dist/esm/index.mjs\");\n/* harmony import */ var _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/sha3 */ \"(ssr)/./node_modules/.pnpm/@noble+hashes@1.6.1/node_modules/@noble/hashes/esm/sha3.js\");\n/* harmony import */ var tweetnacl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tweetnacl */ \"(ssr)/./node_modules/.pnpm/tweetnacl@1.0.3/node_modules/tweetnacl/nacl-fast.js\");\n/* harmony import */ var ed2curve__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ed2curve */ \"(ssr)/./node_modules/.pnpm/ed2curve@0.3.0/node_modules/ed2curve/ed2curve.js\");\n/* harmony import */ var _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aptos-connect/wallet-api */ \"(ssr)/./node_modules/.pnpm/@aptos-connect+wallet-api@0.1.5_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2.0_aptos@1.21.0/node_modules/@aptos-connect/wallet-api/dist/index.mjs\");\n// src/encrDecr.ts\n\n\n\n\n\n// src/errors.ts\nvar EncryptionEnvelopeError = class extends Error {\n};\nvar EnvelopeMessageMismatchError = class _EnvelopeMessageMismatchError extends EncryptionEnvelopeError {\n  constructor(message, field) {\n    super(message);\n    this.field = field;\n    this.name = \"EnvelopeMessageMismatchError\";\n    Object.setPrototypeOf(this, _EnvelopeMessageMismatchError.prototype);\n  }\n};\nvar DecryptionError = class _DecryptionError extends EncryptionEnvelopeError {\n  constructor(message) {\n    super(message);\n    this.name = \"DecryptionError\";\n    Object.setPrototypeOf(this, _DecryptionError.prototype);\n  }\n};\n\n// src/utils.ts\n\nvar KeyTypes = /* @__PURE__ */ ((KeyTypes2) => {\n  KeyTypes2[\"Ed25519PublicKey\"] = \"Ed25519PublicKey\";\n  KeyTypes2[\"Ed25519SecretKey\"] = \"Ed25519SecretKey\";\n  KeyTypes2[\"X25519PublicKey\"] = \"X25519PublicKey\";\n  KeyTypes2[\"X25519SecretKey\"] = \"X25519SecretKey\";\n  return KeyTypes2;\n})(KeyTypes || {});\nfunction createX25519KeyPair() {\n  return keypairToX25519(tweetnacl__WEBPACK_IMPORTED_MODULE_1__.box.keyPair());\n}\nfunction createEd25519KeyPair() {\n  return keypairToEd25519(tweetnacl__WEBPACK_IMPORTED_MODULE_1__.sign.keyPair());\n}\nfunction toKey(rawKey, type) {\n  return {\n    key: rawKey,\n    type\n  };\n}\nfunction keypairToEd25519(keyPair) {\n  return {\n    publicKey: toKey(keyPair.publicKey, \"Ed25519PublicKey\" /* Ed25519PublicKey */),\n    secretKey: toKey(keyPair.secretKey, \"Ed25519SecretKey\" /* Ed25519SecretKey */)\n  };\n}\nfunction keypairToX25519(keyPair) {\n  return {\n    publicKey: toKey(keyPair.publicKey, \"X25519PublicKey\" /* X25519PublicKey */),\n    secretKey: toKey(keyPair.secretKey, \"X25519SecretKey\" /* X25519SecretKey */)\n  };\n}\nfunction aptosAccountToEd25519Keypair(account) {\n  return ed25519KeypairFromSecret(account.signingKey.secretKey);\n}\nfunction ed25519KeypairFromSecret(ed25519SecretKeyBytes) {\n  return keypairToEd25519(tweetnacl__WEBPACK_IMPORTED_MODULE_1__.sign.keyPair.fromSeed(ed25519SecretKeyBytes.slice(0, 32)));\n}\nfunction decodeBase64(base64Str) {\n  if (globalThis.Buffer) {\n    return new Uint8Array(Buffer.from(base64Str, \"base64\"));\n  }\n  return Uint8Array.from(atob(base64Str), (m) => m.codePointAt(0));\n}\nfunction encodeBase64(bytes) {\n  if (globalThis.Buffer) {\n    return Buffer.from(bytes).toString(\"base64\");\n  }\n  return btoa(Array.from(bytes, (x) => String.fromCodePoint(x)).join(\"\"));\n}\nfunction concatUint8array(arrayOne, arrayTwo) {\n  const mergedArray = new Uint8Array(arrayOne.length + arrayTwo.length);\n  mergedArray.set(arrayOne);\n  mergedArray.set(arrayTwo, arrayOne.length);\n  return mergedArray;\n}\n\n// src/encrDecr.ts\nvar SIGNATURE_PREFIX = \"APTOS::IDENTITY_CONNECT\";\nfunction convertEd25519PublicKeyToX25519PublicKey(ed25519PublicKey, errorKeyName) {\n  const x25519PublicKey = ed2curve__WEBPACK_IMPORTED_MODULE_2__.convertPublicKey(ed25519PublicKey.key.slice(0, 32));\n  if (!x25519PublicKey)\n    throw new Error(`${errorKeyName} is not a valid Ed25519 public key`);\n  return toKey(x25519PublicKey, \"X25519PublicKey\" /* X25519PublicKey */);\n}\nfunction convertEd25519SecretKeyToX25519SecretKey(ed25519SecretKey) {\n  const x25519SecretKey = ed2curve__WEBPACK_IMPORTED_MODULE_2__.convertSecretKey(ed25519SecretKey.key.slice(0, 32));\n  return toKey(x25519SecretKey, \"X25519SecretKey\" /* X25519SecretKey */);\n}\nfunction serializeEncryptionResult(enc) {\n  return {\n    nonceB64: encodeBase64(enc.nonce),\n    securedB64: encodeBase64(enc.secured)\n  };\n}\nfunction deserializeEncryptionResult(enc) {\n  return {\n    nonce: decodeBase64(enc.nonceB64),\n    secured: decodeBase64(enc.securedB64)\n  };\n}\nfunction decryptSerializedEncryptionResult(senderX25519PublicKey, receiverEd25519SecretKey, enc) {\n  const des = deserializeEncryptionResult(enc);\n  return decryptObject(senderX25519PublicKey, receiverEd25519SecretKey, des.secured, des.nonce);\n}\nfunction decryptSerializedEncryptionResultDirect(senderX25519PublicKey, receiverX25519SecretKey, enc) {\n  const des = deserializeEncryptionResult(enc);\n  return decryptObjectDirect(senderX25519PublicKey, receiverX25519SecretKey, des.secured, des.nonce);\n}\nfunction encryptMessage(senderX25519SecretKey, receiverEd25519PublicKey, message) {\n  const receiverX25519PublicKey = convertEd25519PublicKeyToX25519PublicKey(\n    receiverEd25519PublicKey,\n    \"receiver public key\"\n  );\n  return encryptMessageDirect(senderX25519SecretKey, receiverX25519PublicKey, message);\n}\nfunction encryptMessageDirect(senderX25519SecretKey, receiverX25519PublicKey, message) {\n  const nonce = tweetnacl__WEBPACK_IMPORTED_MODULE_1__.randomBytes(tweetnacl__WEBPACK_IMPORTED_MODULE_1__.box.nonceLength);\n  const messageUint8 = new TextEncoder().encode(message);\n  const secured = tweetnacl__WEBPACK_IMPORTED_MODULE_1__.box(messageUint8, nonce, receiverX25519PublicKey.key, senderX25519SecretKey.key.slice(0, 32));\n  return { nonce, secured };\n}\nfunction encryptObject(senderX25519SecretKey, receiverEd25519PublicKey, message) {\n  const receiverX25519PublicKey = convertEd25519PublicKeyToX25519PublicKey(\n    receiverEd25519PublicKey,\n    \"receiver public key\"\n  );\n  return encryptObjectDirect(senderX25519SecretKey, receiverX25519PublicKey, message);\n}\nfunction encryptObjectDirect(senderX25519SecretKey, receiverX25519PublicKey, message) {\n  return encryptMessageDirect(senderX25519SecretKey, receiverX25519PublicKey, JSON.stringify(message));\n}\nfunction decryptMessage(senderX25519PublicKey, receiverEd25519SecretKey, securedMessage, nonce) {\n  const receiverX25519SecretKey = convertEd25519SecretKeyToX25519SecretKey(receiverEd25519SecretKey);\n  return decryptMessageDirect(senderX25519PublicKey, receiverX25519SecretKey, securedMessage, nonce);\n}\nfunction decryptMessageDirect(senderX25519PublicKey, receiverX25519SecretKey, securedMessage, nonce) {\n  let decryptedUint8;\n  try {\n    decryptedUint8 = tweetnacl__WEBPACK_IMPORTED_MODULE_1__.box.open(\n      securedMessage,\n      nonce,\n      senderX25519PublicKey.key.slice(0, 32),\n      receiverX25519SecretKey.key.slice(0, 32)\n    );\n  } catch (e) {\n    throw new DecryptionError(`Could not decrypt message: ${e.message}`);\n  }\n  if (!decryptedUint8)\n    throw new DecryptionError(\"Could not decrypt message\");\n  return new TextDecoder().decode(decryptedUint8);\n}\nfunction decryptObject(senderX25519PublicKey, receiverEd25519SecretKey, securedMessage, nonce) {\n  const receiverX25519SecretKey = convertEd25519SecretKeyToX25519SecretKey(receiverEd25519SecretKey);\n  return decryptObjectDirect(senderX25519PublicKey, receiverX25519SecretKey, securedMessage, nonce);\n}\nfunction decryptObjectDirect(senderX25519PublicKey, receiverX25519SecretKey, securedMessage, nonce) {\n  const decryptedStr = decryptMessageDirect(senderX25519PublicKey, receiverX25519SecretKey, securedMessage, nonce);\n  return JSON.parse(decryptedStr);\n}\nfunction messageHash(message, purpose) {\n  const signaturePrefixHash = new Uint8Array((0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__.sha3_256)(`${SIGNATURE_PREFIX}::${purpose}::`));\n  return new Uint8Array((0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__.sha3_256)(concatUint8array(signaturePrefixHash, message)));\n}\nfunction signWithEd25519SecretKey(message, signingEd25519SecretKey, purpose) {\n  return tweetnacl__WEBPACK_IMPORTED_MODULE_1__.sign.detached(messageHash(message, purpose), signingEd25519SecretKey.key);\n}\nfunction makeEd25519SecretKeySignCallbackNoDomainSeparation(signingEd25519SecretKey) {\n  return async (message) => new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Ed25519Signature(tweetnacl__WEBPACK_IMPORTED_MODULE_1__.sign.detached(message, signingEd25519SecretKey.key));\n}\nfunction verifySignature(message, signature, signingPublicKey, purpose) {\n  return signingPublicKey.verifySignature({ message: messageHash(message, purpose), signature });\n}\nfunction hashAndVerifySignature(message, signature, signingPublicKey, purpose) {\n  const messageUint8 = message instanceof Uint8Array ? message : new TextEncoder().encode(message);\n  const messageUint8Hash = (0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__.sha3_256)(messageUint8);\n  return verifySignature(messageUint8Hash, signature, signingPublicKey, purpose);\n}\n\n// src/securedEnvelope.ts\n\n\nvar REQUIRED_FIELDS = [\n  \"receiverEd25519PublicKeyB64\",\n  \"senderEd25519PublicKeyB64\",\n  \"senderX25519PublicKeyB64\",\n  \"sequence\",\n  \"timestampMillis\"\n].sort();\nfunction ensurePrivatePublicFieldsDisjoint(privateMessage, publicMessage) {\n  const intersection = Object.keys(privateMessage).filter((x) => Object.keys(publicMessage).includes(x));\n  if (intersection.length > 0) {\n    const field = intersection[0];\n    throw new EnvelopeMessageMismatchError(`Field ${field} appears in both private and public message fields`, field);\n  }\n}\nfunction ensureMetadataFields(message) {\n  const messageKeys = Object.keys(message).sort();\n  const extraFields = messageKeys.filter((key) => !REQUIRED_FIELDS.includes(key));\n  const missingFields = REQUIRED_FIELDS.filter((key) => !messageKeys.includes(key));\n  if (extraFields.length > 0 || missingFields.length > 0) {\n    let extraFieldsStr = extraFields.length > 0 ? `extra(${extraFields.join(\", \")})` : \"\";\n    const missingFieldsStr = missingFields.length > 0 ? `missing(${missingFields.join(\", \")})` : \"\";\n    extraFieldsStr = extraFieldsStr.length > 0 && missingFieldsStr.length > 0 ? `${extraFieldsStr}, ` : extraFieldsStr;\n    throw new EnvelopeMessageMismatchError(\n      `PublicMessage metadata fields do not conform to spec: ${extraFieldsStr}${missingFieldsStr}`,\n      \"_metadata\"\n    );\n  }\n}\nfunction deserializeTransportEnvelope(transportEnvelope) {\n  const publicMessage = JSON.parse(transportEnvelope.serializedPublicMessage);\n  return {\n    ...transportEnvelope,\n    publicMessage\n  };\n}\nfunction encryptAndSignEnvelope(senderEd25519SecretKey, senderEd25519PublicKey, receiverEd25519PublicKey, sequence, publicMessage, privateMessage) {\n  const senderEphemeralX25519KeyPair = createX25519KeyPair();\n  const metadata = constructMetadata(\n    senderEd25519PublicKey,\n    receiverEd25519PublicKey,\n    sequence,\n    senderEphemeralX25519KeyPair.publicKey\n  );\n  ensureMetadataFields(metadata);\n  ensurePrivatePublicFieldsDisjoint(privateMessage, publicMessage);\n  return dangerouslyEncryptAndSignEnvelopeUnvalidated(\n    senderEd25519SecretKey,\n    receiverEd25519PublicKey,\n    metadata,\n    privateMessage,\n    publicMessage,\n    senderEphemeralX25519KeyPair\n  );\n}\nfunction constructMetadata(senderEd25519PublicKey, receiverEd25519PublicKey, sequence, senderEphemeralX25519PublicKey) {\n  return {\n    receiverEd25519PublicKeyB64: encodeBase64(receiverEd25519PublicKey.key),\n    senderEd25519PublicKeyB64: encodeBase64(senderEd25519PublicKey.key),\n    senderX25519PublicKeyB64: encodeBase64(senderEphemeralX25519PublicKey.key),\n    sequence,\n    timestampMillis: Date.now()\n  };\n}\nfunction dangerouslyEncryptAndSignEnvelopeUnvalidated(senderEd25519SecretKey, receiverEd25519PublicKey, metadata, privateMessage, publicMessage, senderEphemeralX25519KeyPair) {\n  const encryptionResult = encryptObject(\n    senderEphemeralX25519KeyPair.secretKey,\n    receiverEd25519PublicKey,\n    privateMessage\n  );\n  const encryptedPrivateMessage = serializeEncryptionResult(encryptionResult);\n  const encryptedPrivateMessageBytes = decodeBase64(encryptedPrivateMessage.securedB64);\n  const serializedPublicMessage = JSON.stringify({ ...publicMessage, _metadata: metadata });\n  const publicMessageBytes = new TextEncoder().encode(serializedPublicMessage);\n  const messageSignature = signEnvelope(publicMessageBytes, encryptedPrivateMessageBytes, senderEd25519SecretKey);\n  return {\n    encryptedPrivateMessage,\n    messageSignature,\n    serializedPublicMessage\n  };\n}\nfunction combineHashedEnvelopeMessageBytes(publicMessageBytes, privateMessageBytes) {\n  const publicMessageBytesHash = (0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__.sha3_256)(publicMessageBytes);\n  const privateMessageBytesHash = (0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__.sha3_256)(privateMessageBytes);\n  const combinedHash = new Uint8Array(publicMessageBytesHash.length + privateMessageBytesHash.length);\n  combinedHash.set(publicMessageBytesHash);\n  combinedHash.set(privateMessageBytesHash, publicMessageBytesHash.length);\n  return (0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__.sha3_256)(combinedHash);\n}\nfunction signEnvelope(publicMessageBytes, privateMessageBytes, senderEd25519SecretKey) {\n  const messageHashBytes = combineHashedEnvelopeMessageBytes(publicMessageBytes, privateMessageBytes);\n  const signatureBytes = signWithEd25519SecretKey(messageHashBytes, senderEd25519SecretKey, \"SECURED_ENVELOPE\");\n  return _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Hex.fromHexInput(signatureBytes).toString();\n}\nfunction verifyEnvelopeSignature(publicMessageBytes, privateMessageBytes, messageSignatureInput, senderEd25519PublicKey) {\n  const messageSignature = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Ed25519Signature(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Hex.fromHexInput(messageSignatureInput).toUint8Array());\n  const senderPublicKey = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Ed25519PublicKey(senderEd25519PublicKey.key);\n  const messageHashBytes = combineHashedEnvelopeMessageBytes(publicMessageBytes, privateMessageBytes);\n  const messageVerified = verifySignature(messageHashBytes, messageSignature, senderPublicKey, \"SECURED_ENVELOPE\");\n  if (!messageVerified) {\n    throw new EnvelopeMessageMismatchError(\"Could not verify SecuredEnvelope signature\", \"messageSignature\");\n  }\n}\nfunction decryptEnvelope(senderEd25519PublicKey, receiverEd25519SecretKey, message) {\n  const { encryptedPrivateMessage, messageSignature, serializedPublicMessage } = message;\n  const publicMessage = JSON.parse(serializedPublicMessage);\n  const rawPrivateMessage = decodeBase64(encryptedPrivateMessage.securedB64);\n  const rawPublicMessage = new TextEncoder().encode(serializedPublicMessage);\n  verifyEnvelopeSignature(rawPublicMessage, rawPrivateMessage, messageSignature, senderEd25519PublicKey);\n  const senderEd25519PublicKeyB64 = encodeBase64(senderEd25519PublicKey.key);\n  const expectedPublicKeyB64 = publicMessage._metadata.senderEd25519PublicKeyB64;\n  if (senderEd25519PublicKeyB64 !== expectedPublicKeyB64) {\n    throw new EnvelopeMessageMismatchError(\n      \"senderEd25519PublicKey in envelope does not match provided receiverEd25519SecretKey\",\n      \"senderPublicKey\"\n    );\n  }\n  const senderX25519PublicKeyBytes = decodeBase64(publicMessage._metadata.senderX25519PublicKeyB64);\n  const senderX25519PublicKey = toKey(senderX25519PublicKeyBytes, \"X25519PublicKey\" /* X25519PublicKey */);\n  const encryptionResult = deserializeEncryptionResult(encryptedPrivateMessage);\n  const privateMessage = decryptObject(\n    senderX25519PublicKey,\n    receiverEd25519SecretKey,\n    encryptionResult.secured,\n    encryptionResult.nonce\n  );\n  ensureMetadataFields(publicMessage._metadata);\n  ensurePrivatePublicFieldsDisjoint(privateMessage, publicMessage);\n  return {\n    messageSignature,\n    privateMessage,\n    publicMessage\n  };\n}\n\n// src/serialization.ts\n\n\nfunction serializePublicKeyB64(publicKey) {\n  const serializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Serializer();\n  (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_4__.serializePublicKey)(serializer, publicKey);\n  return (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_4__.bytesToBase64)(serializer.toUint8Array());\n}\nfunction deserializePublicKeyB64(publicKeyB64) {\n  const serializedPublicKey = (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_4__.base64ToBytes)(publicKeyB64);\n  const deserializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Deserializer(serializedPublicKey);\n  return (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_4__.deserializePublicKey)(deserializer);\n}\nfunction deserializeEd25519PublicKeyB64(ed25519PublicKeyB64) {\n  return new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Ed25519PublicKey(decodeBase64(ed25519PublicKeyB64));\n}\nfunction serializeSignatureB64(signature) {\n  const serializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Serializer();\n  (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_4__.serializeSignature)(serializer, signature);\n  return (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_4__.bytesToBase64)(serializer.toUint8Array());\n}\nfunction deserializeSignatureB64(signatureB64) {\n  const serializedSignature = (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_4__.base64ToBytes)(signatureB64);\n  const deserializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Deserializer(serializedSignature);\n  return (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_4__.deserializeSignature)(deserializer);\n}\nfunction deserializeEd25519SignatureB64(ed25519SignatureB64) {\n  const signatureBytes = _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Hex.fromHexInput(ed25519SignatureB64).toUint8Array();\n  return new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Ed25519Signature(signatureBytes);\n}\nfunction publicKeyB64FromEd25519PublicKeyB64(ed25519PublicKeyB64) {\n  const publicKey = deserializeEd25519PublicKeyB64(ed25519PublicKeyB64);\n  return serializePublicKeyB64(publicKey);\n}\n\n// src/walletAccounts.ts\n\n\nvar AccountConnectionAction = /* @__PURE__ */ ((AccountConnectionAction2) => {\n  AccountConnectionAction2[\"ADD\"] = \"add\";\n  AccountConnectionAction2[\"REMOVE\"] = \"remove\";\n  return AccountConnectionAction2;\n})(AccountConnectionAction || {});\nfunction deriveAccountTransportEd25519Keypair(ed25519SecretKeyOrSignCallback, publicKey) {\n  const publicKeyBytes = publicKey instanceof _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.PublicKey ? publicKey.toUint8Array() : publicKey.key;\n  if (ed25519SecretKeyOrSignCallback instanceof Function) {\n    const seedGeneratorBytes = messageHash(publicKeyBytes, \"TRANSPORT_KEYPAIR\");\n    const signature = ed25519SecretKeyOrSignCallback(seedGeneratorBytes);\n    if (signature instanceof Promise) {\n      return signature.then((value) => ed25519KeypairFromSecret(value.toUint8Array()));\n    }\n    return ed25519KeypairFromSecret(signature.toUint8Array());\n  }\n  const seedBytes = signWithEd25519SecretKey(publicKeyBytes, ed25519SecretKeyOrSignCallback, \"TRANSPORT_KEYPAIR\");\n  return ed25519KeypairFromSecret(seedBytes);\n}\nfunction createSerializedAccountInfo(...[\n  signCallback,\n  publicKey,\n  transportEd25519PublicKey,\n  action,\n  intentId,\n  accountAddress\n]) {\n  const authKey = publicKey.authKey();\n  const finalAccountAddress = accountAddress || authKey.derivedAddress().toString();\n  const publicKeyB64 = serializePublicKeyB64(publicKey);\n  const accountInfo = {\n    accountAddress: finalAccountAddress,\n    action,\n    intentId,\n    publicKeyB64,\n    timestampMillis: Date.now(),\n    transportEd25519PublicKeyB64: encodeBase64(transportEd25519PublicKey.key)\n  };\n  const accountInfoSerialized = JSON.stringify(accountInfo);\n  const accountInfoBytes = new TextEncoder().encode(accountInfoSerialized);\n  const accountInfoHash = (0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_3__.sha3_256)(accountInfoBytes);\n  const signature = signCallback(messageHash(accountInfoHash, \"ACCOUNT_INFO\"));\n  if (signature instanceof Promise) {\n    return signature.then((value) => ({\n      accountInfoSerialized,\n      signatureB64: serializeSignatureB64(value)\n    }));\n  }\n  return {\n    accountInfoSerialized,\n    signatureB64: serializeSignatureB64(signature)\n  };\n}\nasync function aptosAccountToSerializedInfo(account, intentId) {\n  const signCallback = async (data) => account.sign(data);\n  const transportKey = await deriveAccountTransportEd25519Keypair(signCallback, account.publicKey);\n  return createSerializedAccountInfo(\n    signCallback,\n    account.publicKey,\n    transportKey.publicKey,\n    \"add\" /* ADD */,\n    intentId\n  );\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@identity-connect+crypto@0.2.4_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2.0_aptos@1.21.0/node_modules/@identity-connect/crypto/dist/index.mjs\n");

/***/ })

};
;