"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@aptos-connect+web-transport@0.1.0_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2._rbkqx4le5iilq7vcymgqhcdg6y";
exports.ids = ["vendor-chunks/@aptos-connect+web-transport@0.1.0_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2._rbkqx4le5iilq7vcymgqhcdg6y"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@aptos-connect+web-transport@0.1.0_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2._rbkqx4le5iilq7vcymgqhcdg6y/node_modules/@aptos-connect/web-transport/dist/index.mjs":
/*!**************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@aptos-connect+web-transport@0.1.0_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2._rbkqx4le5iilq7vcymgqhcdg6y/node_modules/@aptos-connect/web-transport/dist/index.mjs ***!
  \**************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebWalletTransport: () => (/* binding */ WebWalletTransport)\n/* harmony export */ });\n/* harmony import */ var _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aptos-connect/wallet-api */ \"(ssr)/./node_modules/.pnpm/@aptos-connect+wallet-api@0.1.5_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2.0_aptos@1.21.0/node_modules/@aptos-connect/wallet-api/dist/index.mjs\");\n/* harmony import */ var _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aptos-labs/ts-sdk */ \"(ssr)/./node_modules/.pnpm/@aptos-labs+ts-sdk@1.30.0/node_modules/@aptos-labs/ts-sdk/dist/esm/index.mjs\");\n/* harmony import */ var _telegram_apps_bridge__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @telegram-apps/bridge */ \"(ssr)/./node_modules/.pnpm/@telegram-apps+bridge@1.5.0/node_modules/@telegram-apps/bridge/dist/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/v4.js\");\n// src/index.ts\n\n\n// src/prompt.ts\n\nvar DEFAULT_PROMPT_SIZE = { height: 695, width: 465 };\nvar PROMPT_POLLER_INTERVAL = 500;\nvar dismissalSerializedResponse = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.ConnectResponse.serialize({ status: \"dismissed\" });\nvar PromptUnauthorizedError = class extends Error {\n  constructor() {\n    super(\"Unauthorized\");\n  }\n};\nfunction openPrompt(url, size = DEFAULT_PROMPT_SIZE) {\n  const { height, width } = size;\n  const options = {\n    height,\n    left: window.screenLeft + Math.round((window.outerWidth - width) / 2),\n    popup: true,\n    top: window.screenTop + Math.round((window.outerHeight - height) / 2),\n    width\n  };\n  const strOptions = Object.entries(options).map(([key, value]) => `${key}=${JSON.stringify(value)}`).reduce((acc, entry) => `${acc}, ${entry}`);\n  const href = url instanceof URL ? url.href : url;\n  const promptWindow = window.open(href, void 0, strOptions);\n  if (promptWindow === null) {\n    throw new Error(\"Couldn't open prompt\");\n  }\n  return promptWindow;\n}\nasync function waitForPromptResponse(baseUrl, promptWindow) {\n  return new Promise((resolve, reject) => {\n    const listeners = {\n      onMessage: (message) => {\n        if (message.source !== promptWindow || message.origin !== baseUrl) {\n          return;\n        }\n        if ((0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.isTypedMessage)(_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.PromptUnauthorizedErrorMessage, message.data)) {\n          window.removeEventListener(\"message\", listeners.onMessage);\n          clearTimeout(listeners.promptPollerId);\n          reject(new PromptUnauthorizedError());\n          return;\n        }\n        if ((0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.isTypedMessage)(_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.PromptOpenerPingRequestMessage, message.data)) {\n          promptWindow.postMessage(new _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.PromptOpenerPingResponseMessage(), baseUrl);\n          return;\n        }\n        if ((0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.isTypedMessage)(_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.PromptApprovalResponseMessage, message.data)) {\n          window.removeEventListener(\"message\", listeners.onMessage);\n          clearTimeout(listeners.promptPollerId);\n          resolve(message.data.serializedValue);\n        }\n      },\n      promptPollerId: setInterval(() => {\n        if (promptWindow.closed) {\n          window.removeEventListener(\"message\", listeners.onMessage);\n          clearTimeout(listeners.promptPollerId);\n          resolve(dismissalSerializedResponse);\n        }\n      }, PROMPT_POLLER_INTERVAL)\n    };\n    window.addEventListener(\"message\", listeners.onMessage);\n  });\n}\n\n// src/state.ts\n\n\nvar localDappStateKey = \"@aptos-connect/dapp-local-state\";\nfunction serializeLocalDappState(state) {\n  const serializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_1__.Serializer();\n  serializer.serializeU32AsUleb128(state.connectedAccounts.length);\n  for (const account of state.connectedAccounts) {\n    (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.serializeAccountInfo)(serializer, account);\n  }\n  return serializer.toUint8Array();\n}\nfunction deserializeLocalDappState(serializedValue) {\n  const deserializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_1__.Deserializer(serializedValue);\n  const connectedAccountsLength = deserializer.deserializeUleb128AsU32();\n  const connectedAccounts = [];\n  for (let i = 0; i < connectedAccountsLength; i += 1) {\n    connectedAccounts.push((0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.deserializeAccountInfo)(deserializer));\n  }\n  return { connectedAccounts };\n}\nfunction getState() {\n  const encodedValue = window.localStorage.getItem(localDappStateKey);\n  return encodedValue ? deserializeLocalDappState((0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.base64ToBytes)(encodedValue)) : { connectedAccounts: [] };\n}\nfunction setState(state) {\n  const serializedValue = serializeLocalDappState(state);\n  const encodedValue = (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64)(serializedValue);\n  window.localStorage.setItem(localDappStateKey, encodedValue);\n}\nfunction getConnectedAccounts() {\n  const state = getState();\n  return state.connectedAccounts;\n}\nfunction addConnectedAccount(account) {\n  const { connectedAccounts, ...state } = getState();\n  connectedAccounts.push(account);\n  setState({ ...state, connectedAccounts });\n}\nfunction removeConnectedAccount(address) {\n  const { connectedAccounts, ...state } = getState();\n  const index = connectedAccounts.findIndex((a) => a.address.equals(address));\n  if (index >= 0) {\n    connectedAccounts.splice(index, 1);\n  }\n  setState({ ...state, connectedAccounts });\n}\n\n// src/telegram/openTelegramPrompt.ts\n\n\n\n\n// src/telegram/createWalletRequest.ts\n\nasync function createWalletRequest(baseUrl, request) {\n  const encodedClientIdentityKey = (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64url)(request.clientIdentityKey.toUint8Array());\n  const response = await fetch(`${baseUrl}/v1/dapp/clients/${encodedClientIdentityKey}/requests/`, {\n    body: JSON.stringify({\n      body: (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.encodeWalletRequestBody)(request.body),\n      id: request.id,\n      signature: (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64)(request.signature.toUint8Array()),\n      timestamp: request.timestamp\n    }),\n    headers: { Accept: \"application/json\", \"Content-Type\": \"application/json\" },\n    method: \"post\"\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed creating the wallet request\");\n  }\n}\n\n// src/telegram/getClientIdentityKey.ts\n\nvar identityKeyStorageKey = \"@aptos-connect/client-identity-key\";\nfunction getClientIdentityKey() {\n  const serialized = window.localStorage.getItem(identityKeyStorageKey);\n  if (serialized) {\n    return new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_1__.Ed25519PrivateKey(serialized);\n  }\n  const identityKey = _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_1__.Ed25519PrivateKey.generate();\n  window.localStorage.setItem(identityKeyStorageKey, identityKey.toString());\n  return identityKey;\n}\n\n// src/telegram/getWalletResponse.ts\n\n\n// src/telegram/smartPolling.ts\nvar ON_RESUME_DELAY = 300;\nvar FG_RESPONSE_POLLING_INTERVAL = 2e3;\nvar BG_RESPONSE_POLLING_INTERVAL = 3e3;\nvar POLLING_TIMEOUT = 5 * 6e4;\nfunction waitFor(milliseconds) {\n  let timeoutId;\n  let cancel = () => {\n  };\n  const timer = new Promise((resolve) => {\n    timeoutId = setTimeout(resolve, milliseconds);\n    cancel = () => {\n      clearTimeout(timeoutId);\n      resolve();\n    };\n  });\n  timer.cancel = cancel;\n  return timer;\n}\nasync function smartPolling(callback) {\n  let timer;\n  let justResumed = false;\n  let pollingInterval = BG_RESPONSE_POLLING_INTERVAL;\n  const onWindowFocus = () => {\n    justResumed = true;\n    pollingInterval = FG_RESPONSE_POLLING_INTERVAL;\n    timer?.cancel();\n  };\n  const onWindowBlur = () => {\n    pollingInterval = BG_RESPONSE_POLLING_INTERVAL;\n  };\n  window.addEventListener(\"focus\", onWindowFocus);\n  window.addEventListener(\"blur\", onWindowBlur);\n  try {\n    const startTime = Date.now();\n    while (Date.now() - startTime < POLLING_TIMEOUT) {\n      timer = waitFor(pollingInterval);\n      await timer;\n      if (justResumed) {\n        timer = waitFor(ON_RESUME_DELAY);\n        await timer;\n      }\n      const response = await callback();\n      if (response.status === 200) {\n        return response;\n      }\n      justResumed = false;\n    }\n    throw new Error(\"Timeout\");\n  } finally {\n    window.removeEventListener(\"focus\", onWindowFocus);\n    window.removeEventListener(\"blur\", onWindowFocus);\n  }\n}\n\n// src/telegram/getWalletResponse.ts\nasync function getWalletResponse(baseUrl, clientIdentityKey, requestId) {\n  const encodedClientIdentityKey = (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64url)(clientIdentityKey.toUint8Array());\n  const url = new URL(`${baseUrl}/v1/dapp/clients/${encodedClientIdentityKey}/requests/${requestId}/response/`);\n  const response = await smartPolling(\n    () => fetch(url, {\n      headers: { Accept: \"application/json\" },\n      method: \"get\"\n    })\n  );\n  const responseBody = await response.json();\n  const data = (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.base64ToBytes)(responseBody.data.body);\n  return { data };\n}\n\n// src/telegram/openTelegramPrompt.ts\nasync function openTelegramPrompt(baseUrl, request) {\n  const identityKey = getClientIdentityKey();\n  const clientIdentityKey = identityKey.publicKey();\n  const requestId = (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n  const timestamp = Date.now();\n  const challenge = (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.makePopupWalletRequestChallenge)({ body: request, id: requestId, timestamp });\n  const signature = identityKey.sign(challenge);\n  const signedWalletRequest = {\n    body: request,\n    clientIdentityKey,\n    id: requestId,\n    signature,\n    timestamp\n  };\n  let encodedRequest = (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.encodePopupWalletRequest)(signedWalletRequest);\n  if (encodedRequest.length > 1024) {\n    void createWalletRequest(baseUrl, signedWalletRequest);\n    encodedRequest = (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.encodePopupWalletRequest)({\n      clientIdentityKey,\n      id: requestId,\n      signature,\n      timestamp\n    });\n  }\n  (0,_telegram_apps_bridge__WEBPACK_IMPORTED_MODULE_3__.postEvent)(\"web_app_open_tg_link\", {\n    path_full: `/AptosConnectBot/AptosConnect?startapp=${encodedRequest}`\n  });\n  return getWalletResponse(baseUrl, clientIdentityKey, requestId);\n}\n\n// src/telegram/index.ts\nfunction isTelegramMiniApp() {\n  return window.TelegramWebviewProxy !== void 0;\n}\n\n// src/index.ts\nvar WebWalletTransport = class {\n  constructor(baseUrl, provider = \"google\") {\n    this.baseUrl = baseUrl;\n    this.provider = provider;\n    this.baseUrl = baseUrl;\n  }\n  async sendPromptRequest(request) {\n    if (isTelegramMiniApp()) {\n      return openTelegramPrompt(this.baseUrl, request);\n    }\n    const url = new URL(`${this.baseUrl}/prompt/`);\n    url.searchParams.set(\"request\", (0,_aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.urlEncodeWalletRequest)(request));\n    url.searchParams.set(\"provider\", this.provider);\n    const prompt = openPrompt(url);\n    return waitForPromptResponse(this.baseUrl, prompt);\n  }\n  async sendRequest(request) {\n    switch (request.name) {\n      case _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.IsConnectedRequest.name: {\n        const connectedAccounts = getConnectedAccounts();\n        return _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.IsConnectedResponse.serialize(connectedAccounts.length > 0);\n      }\n      case _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.GetConnectedAccountsRequest.name: {\n        const connectedAccounts = getConnectedAccounts();\n        return _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.GetConnectedAccountsResponse.serialize(connectedAccounts);\n      }\n      case _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.ConnectRequest.name: {\n        const serializedResponse = await this.sendPromptRequest(request);\n        const response = _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.ConnectResponse.deserialize(serializedResponse);\n        if (response.args.status === \"approved\") {\n          const { account, pairing } = response.args.args;\n          if (pairing === void 0) {\n            addConnectedAccount(account);\n          }\n        }\n        return serializedResponse;\n      }\n      case _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.DisconnectRequest.name: {\n        const [activeAccount] = getConnectedAccounts();\n        if (activeAccount) {\n          removeConnectedAccount(activeAccount.address);\n        }\n        return _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.DisconnectResponse.serialize({});\n      }\n      case _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignMessageRequest.name:\n      case _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignTransactionRequest.name:\n      case _aptos_connect_wallet_api__WEBPACK_IMPORTED_MODULE_0__.SignAndSubmitTransactionRequest.name: {\n        return this.sendPromptRequest(request);\n      }\n      default: {\n        throw new Error(\"Unexpected request\");\n      }\n    }\n  }\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFwdG9zLWNvbm5lY3Qrd2ViLXRyYW5zcG9ydEAwLjEuMF9AYXB0b3MtbGFicyt0cy1zZGtAMS4zMC4wX0BhcHRvcy1sYWJzK3dhbGxldC1zdGFuZGFyZEAwLjIuX3Jia3F4NGxlNWlpbHE3dmN5bWdxaGNkZzZ5L25vZGVfbW9kdWxlcy9AYXB0b3MtY29ubmVjdC93ZWItdHJhbnNwb3J0L2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFjbUM7O0FBRW5DO0FBUW1DO0FBQ25DLDRCQUE0QjtBQUM1QjtBQUNBLGtDQUFrQyxzRUFBZSxhQUFhLHFCQUFxQjtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGdCQUFnQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRSxJQUFJLEdBQUcsc0JBQXNCLDZCQUE2QixJQUFJLElBQUksTUFBTTtBQUM5STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx5RUFBYyxDQUFDLHFGQUE4QjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx5RUFBYyxDQUFDLHFGQUE4QjtBQUN6RCx1Q0FBdUMsc0ZBQStCO0FBQ3RFO0FBQ0E7QUFDQSxZQUFZLHlFQUFjLENBQUMsb0ZBQTZCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBTW1DO0FBQzJCO0FBQzlEO0FBQ0E7QUFDQSx5QkFBeUIsMERBQVU7QUFDbkM7QUFDQTtBQUNBLElBQUksK0VBQW9CO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDREQUFZO0FBQ3ZDO0FBQ0E7QUFDQSxrQkFBa0Is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Y2s6Ly9hcnQzbWlzb3JhY2xlLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhcHRvcy1jb25uZWN0K3dlYi10cmFuc3BvcnRAMC4xLjBfQGFwdG9zLWxhYnMrdHMtc2RrQDEuMzAuMF9AYXB0b3MtbGFicyt3YWxsZXQtc3RhbmRhcmRAMC4yLl9yYmtxeDRsZTVpaWxxN3ZjeW1ncWhjZGc2eS9ub2RlX21vZHVsZXMvQGFwdG9zLWNvbm5lY3Qvd2ViLXRyYW5zcG9ydC9kaXN0L2luZGV4Lm1qcz9iOTZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9pbmRleC50c1xuaW1wb3J0IHtcbiAgQ29ubmVjdFJlcXVlc3QsXG4gIENvbm5lY3RSZXNwb25zZSBhcyBDb25uZWN0UmVzcG9uc2UyLFxuICBEaXNjb25uZWN0UmVxdWVzdCxcbiAgRGlzY29ubmVjdFJlc3BvbnNlLFxuICBHZXRDb25uZWN0ZWRBY2NvdW50c1JlcXVlc3QsXG4gIEdldENvbm5lY3RlZEFjY291bnRzUmVzcG9uc2UsXG4gIElzQ29ubmVjdGVkUmVxdWVzdCxcbiAgSXNDb25uZWN0ZWRSZXNwb25zZSxcbiAgU2lnbkFuZFN1Ym1pdFRyYW5zYWN0aW9uUmVxdWVzdCxcbiAgU2lnbk1lc3NhZ2VSZXF1ZXN0LFxuICBTaWduVHJhbnNhY3Rpb25SZXF1ZXN0LFxuICB1cmxFbmNvZGVXYWxsZXRSZXF1ZXN0XG59IGZyb20gXCJAYXB0b3MtY29ubmVjdC93YWxsZXQtYXBpXCI7XG5cbi8vIHNyYy9wcm9tcHQudHNcbmltcG9ydCB7XG4gIENvbm5lY3RSZXNwb25zZSxcbiAgaXNUeXBlZE1lc3NhZ2UsXG4gIFByb21wdEFwcHJvdmFsUmVzcG9uc2VNZXNzYWdlLFxuICBQcm9tcHRPcGVuZXJQaW5nUmVxdWVzdE1lc3NhZ2UsXG4gIFByb21wdE9wZW5lclBpbmdSZXNwb25zZU1lc3NhZ2UsXG4gIFByb21wdFVuYXV0aG9yaXplZEVycm9yTWVzc2FnZVxufSBmcm9tIFwiQGFwdG9zLWNvbm5lY3Qvd2FsbGV0LWFwaVwiO1xudmFyIERFRkFVTFRfUFJPTVBUX1NJWkUgPSB7IGhlaWdodDogNjk1LCB3aWR0aDogNDY1IH07XG52YXIgUFJPTVBUX1BPTExFUl9JTlRFUlZBTCA9IDUwMDtcbnZhciBkaXNtaXNzYWxTZXJpYWxpemVkUmVzcG9uc2UgPSBDb25uZWN0UmVzcG9uc2Uuc2VyaWFsaXplKHsgc3RhdHVzOiBcImRpc21pc3NlZFwiIH0pO1xudmFyIFByb21wdFVuYXV0aG9yaXplZEVycm9yID0gY2xhc3MgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiVW5hdXRob3JpemVkXCIpO1xuICB9XG59O1xuZnVuY3Rpb24gb3BlblByb21wdCh1cmwsIHNpemUgPSBERUZBVUxUX1BST01QVF9TSVpFKSB7XG4gIGNvbnN0IHsgaGVpZ2h0LCB3aWR0aCB9ID0gc2l6ZTtcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICBoZWlnaHQsXG4gICAgbGVmdDogd2luZG93LnNjcmVlbkxlZnQgKyBNYXRoLnJvdW5kKCh3aW5kb3cub3V0ZXJXaWR0aCAtIHdpZHRoKSAvIDIpLFxuICAgIHBvcHVwOiB0cnVlLFxuICAgIHRvcDogd2luZG93LnNjcmVlblRvcCArIE1hdGgucm91bmQoKHdpbmRvdy5vdXRlckhlaWdodCAtIGhlaWdodCkgLyAyKSxcbiAgICB3aWR0aFxuICB9O1xuICBjb25zdCBzdHJPcHRpb25zID0gT2JqZWN0LmVudHJpZXMob3B0aW9ucykubWFwKChba2V5LCB2YWx1ZV0pID0+IGAke2tleX09JHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YCkucmVkdWNlKChhY2MsIGVudHJ5KSA9PiBgJHthY2N9LCAke2VudHJ5fWApO1xuICBjb25zdCBocmVmID0gdXJsIGluc3RhbmNlb2YgVVJMID8gdXJsLmhyZWYgOiB1cmw7XG4gIGNvbnN0IHByb21wdFdpbmRvdyA9IHdpbmRvdy5vcGVuKGhyZWYsIHZvaWQgMCwgc3RyT3B0aW9ucyk7XG4gIGlmIChwcm9tcHRXaW5kb3cgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBvcGVuIHByb21wdFwiKTtcbiAgfVxuICByZXR1cm4gcHJvbXB0V2luZG93O1xufVxuYXN5bmMgZnVuY3Rpb24gd2FpdEZvclByb21wdFJlc3BvbnNlKGJhc2VVcmwsIHByb21wdFdpbmRvdykge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IHtcbiAgICAgIG9uTWVzc2FnZTogKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgaWYgKG1lc3NhZ2Uuc291cmNlICE9PSBwcm9tcHRXaW5kb3cgfHwgbWVzc2FnZS5vcmlnaW4gIT09IGJhc2VVcmwpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVHlwZWRNZXNzYWdlKFByb21wdFVuYXV0aG9yaXplZEVycm9yTWVzc2FnZSwgbWVzc2FnZS5kYXRhKSkge1xuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBsaXN0ZW5lcnMub25NZXNzYWdlKTtcbiAgICAgICAgICBjbGVhclRpbWVvdXQobGlzdGVuZXJzLnByb21wdFBvbGxlcklkKTtcbiAgICAgICAgICByZWplY3QobmV3IFByb21wdFVuYXV0aG9yaXplZEVycm9yKCkpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNUeXBlZE1lc3NhZ2UoUHJvbXB0T3BlbmVyUGluZ1JlcXVlc3RNZXNzYWdlLCBtZXNzYWdlLmRhdGEpKSB7XG4gICAgICAgICAgcHJvbXB0V2luZG93LnBvc3RNZXNzYWdlKG5ldyBQcm9tcHRPcGVuZXJQaW5nUmVzcG9uc2VNZXNzYWdlKCksIGJhc2VVcmwpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNUeXBlZE1lc3NhZ2UoUHJvbXB0QXBwcm92YWxSZXNwb25zZU1lc3NhZ2UsIG1lc3NhZ2UuZGF0YSkpIHtcbiAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgbGlzdGVuZXJzLm9uTWVzc2FnZSk7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KGxpc3RlbmVycy5wcm9tcHRQb2xsZXJJZCk7XG4gICAgICAgICAgcmVzb2x2ZShtZXNzYWdlLmRhdGEuc2VyaWFsaXplZFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHByb21wdFBvbGxlcklkOiBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIGlmIChwcm9tcHRXaW5kb3cuY2xvc2VkKSB7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGxpc3RlbmVycy5vbk1lc3NhZ2UpO1xuICAgICAgICAgIGNsZWFyVGltZW91dChsaXN0ZW5lcnMucHJvbXB0UG9sbGVySWQpO1xuICAgICAgICAgIHJlc29sdmUoZGlzbWlzc2FsU2VyaWFsaXplZFJlc3BvbnNlKTtcbiAgICAgICAgfVxuICAgICAgfSwgUFJPTVBUX1BPTExFUl9JTlRFUlZBTClcbiAgICB9O1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBsaXN0ZW5lcnMub25NZXNzYWdlKTtcbiAgfSk7XG59XG5cbi8vIHNyYy9zdGF0ZS50c1xuaW1wb3J0IHtcbiAgYmFzZTY0VG9CeXRlcyxcbiAgYnl0ZXNUb0Jhc2U2NCxcbiAgZGVzZXJpYWxpemVBY2NvdW50SW5mbyxcbiAgc2VyaWFsaXplQWNjb3VudEluZm9cbn0gZnJvbSBcIkBhcHRvcy1jb25uZWN0L3dhbGxldC1hcGlcIjtcbmltcG9ydCB7IERlc2VyaWFsaXplciwgU2VyaWFsaXplciB9IGZyb20gXCJAYXB0b3MtbGFicy90cy1zZGtcIjtcbnZhciBsb2NhbERhcHBTdGF0ZUtleSA9IFwiQGFwdG9zLWNvbm5lY3QvZGFwcC1sb2NhbC1zdGF0ZVwiO1xuZnVuY3Rpb24gc2VyaWFsaXplTG9jYWxEYXBwU3RhdGUoc3RhdGUpIHtcbiAgY29uc3Qgc2VyaWFsaXplciA9IG5ldyBTZXJpYWxpemVyKCk7XG4gIHNlcmlhbGl6ZXIuc2VyaWFsaXplVTMyQXNVbGViMTI4KHN0YXRlLmNvbm5lY3RlZEFjY291bnRzLmxlbmd0aCk7XG4gIGZvciAoY29uc3QgYWNjb3VudCBvZiBzdGF0ZS5jb25uZWN0ZWRBY2NvdW50cykge1xuICAgIHNlcmlhbGl6ZUFjY291bnRJbmZvKHNlcmlhbGl6ZXIsIGFjY291bnQpO1xuICB9XG4gIHJldHVybiBzZXJpYWxpemVyLnRvVWludDhBcnJheSgpO1xufVxuZnVuY3Rpb24gZGVzZXJpYWxpemVMb2NhbERhcHBTdGF0ZShzZXJpYWxpemVkVmFsdWUpIHtcbiAgY29uc3QgZGVzZXJpYWxpemVyID0gbmV3IERlc2VyaWFsaXplcihzZXJpYWxpemVkVmFsdWUpO1xuICBjb25zdCBjb25uZWN0ZWRBY2NvdW50c0xlbmd0aCA9IGRlc2VyaWFsaXplci5kZXNlcmlhbGl6ZVVsZWIxMjhBc1UzMigpO1xuICBjb25zdCBjb25uZWN0ZWRBY2NvdW50cyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbm5lY3RlZEFjY291bnRzTGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25uZWN0ZWRBY2NvdW50cy5wdXNoKGRlc2VyaWFsaXplQWNjb3VudEluZm8oZGVzZXJpYWxpemVyKSk7XG4gIH1cbiAgcmV0dXJuIHsgY29ubmVjdGVkQWNjb3VudHMgfTtcbn1cbmZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICBjb25zdCBlbmNvZGVkVmFsdWUgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0obG9jYWxEYXBwU3RhdGVLZXkpO1xuICByZXR1cm4gZW5jb2RlZFZhbHVlID8gZGVzZXJpYWxpemVMb2NhbERhcHBTdGF0ZShiYXNlNjRUb0J5dGVzKGVuY29kZWRWYWx1ZSkpIDogeyBjb25uZWN0ZWRBY2NvdW50czogW10gfTtcbn1cbmZ1bmN0aW9uIHNldFN0YXRlKHN0YXRlKSB7XG4gIGNvbnN0IHNlcmlhbGl6ZWRWYWx1ZSA9IHNlcmlhbGl6ZUxvY2FsRGFwcFN0YXRlKHN0YXRlKTtcbiAgY29uc3QgZW5jb2RlZFZhbHVlID0gYnl0ZXNUb0Jhc2U2NChzZXJpYWxpemVkVmFsdWUpO1xuICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0obG9jYWxEYXBwU3RhdGVLZXksIGVuY29kZWRWYWx1ZSk7XG59XG5mdW5jdGlvbiBnZXRDb25uZWN0ZWRBY2NvdW50cygpIHtcbiAgY29uc3Qgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuICByZXR1cm4gc3RhdGUuY29ubmVjdGVkQWNjb3VudHM7XG59XG5mdW5jdGlvbiBhZGRDb25uZWN0ZWRBY2NvdW50KGFjY291bnQpIHtcbiAgY29uc3QgeyBjb25uZWN0ZWRBY2NvdW50cywgLi4uc3RhdGUgfSA9IGdldFN0YXRlKCk7XG4gIGNvbm5lY3RlZEFjY291bnRzLnB1c2goYWNjb3VudCk7XG4gIHNldFN0YXRlKHsgLi4uc3RhdGUsIGNvbm5lY3RlZEFjY291bnRzIH0pO1xufVxuZnVuY3Rpb24gcmVtb3ZlQ29ubmVjdGVkQWNjb3VudChhZGRyZXNzKSB7XG4gIGNvbnN0IHsgY29ubmVjdGVkQWNjb3VudHMsIC4uLnN0YXRlIH0gPSBnZXRTdGF0ZSgpO1xuICBjb25zdCBpbmRleCA9IGNvbm5lY3RlZEFjY291bnRzLmZpbmRJbmRleCgoYSkgPT4gYS5hZGRyZXNzLmVxdWFscyhhZGRyZXNzKSk7XG4gIGlmIChpbmRleCA+PSAwKSB7XG4gICAgY29ubmVjdGVkQWNjb3VudHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICBzZXRTdGF0ZSh7IC4uLnN0YXRlLCBjb25uZWN0ZWRBY2NvdW50cyB9KTtcbn1cblxuLy8gc3JjL3RlbGVncmFtL29wZW5UZWxlZ3JhbVByb21wdC50c1xuaW1wb3J0IHtcbiAgZW5jb2RlUG9wdXBXYWxsZXRSZXF1ZXN0LFxuICBtYWtlUG9wdXBXYWxsZXRSZXF1ZXN0Q2hhbGxlbmdlXG59IGZyb20gXCJAYXB0b3MtY29ubmVjdC93YWxsZXQtYXBpXCI7XG5pbXBvcnQgeyBwb3N0RXZlbnQgYXMgcG9zdFRlbGVncmFtRXZlbnQgfSBmcm9tIFwiQHRlbGVncmFtLWFwcHMvYnJpZGdlXCI7XG5pbXBvcnQgeyB2NCBhcyByYW5kb21VVUlEIH0gZnJvbSBcInV1aWRcIjtcblxuLy8gc3JjL3RlbGVncmFtL2NyZWF0ZVdhbGxldFJlcXVlc3QudHNcbmltcG9ydCB7XG4gIGJ5dGVzVG9CYXNlNjQgYXMgYnl0ZXNUb0Jhc2U2NDIsXG4gIGJ5dGVzVG9CYXNlNjR1cmwsXG4gIGVuY29kZVdhbGxldFJlcXVlc3RCb2R5XG59IGZyb20gXCJAYXB0b3MtY29ubmVjdC93YWxsZXQtYXBpXCI7XG5hc3luYyBmdW5jdGlvbiBjcmVhdGVXYWxsZXRSZXF1ZXN0KGJhc2VVcmwsIHJlcXVlc3QpIHtcbiAgY29uc3QgZW5jb2RlZENsaWVudElkZW50aXR5S2V5ID0gYnl0ZXNUb0Jhc2U2NHVybChyZXF1ZXN0LmNsaWVudElkZW50aXR5S2V5LnRvVWludDhBcnJheSgpKTtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtiYXNlVXJsfS92MS9kYXBwL2NsaWVudHMvJHtlbmNvZGVkQ2xpZW50SWRlbnRpdHlLZXl9L3JlcXVlc3RzL2AsIHtcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBib2R5OiBlbmNvZGVXYWxsZXRSZXF1ZXN0Qm9keShyZXF1ZXN0LmJvZHkpLFxuICAgICAgaWQ6IHJlcXVlc3QuaWQsXG4gICAgICBzaWduYXR1cmU6IGJ5dGVzVG9CYXNlNjQyKHJlcXVlc3Quc2lnbmF0dXJlLnRvVWludDhBcnJheSgpKSxcbiAgICAgIHRpbWVzdGFtcDogcmVxdWVzdC50aW1lc3RhbXBcbiAgICB9KSxcbiAgICBoZWFkZXJzOiB7IEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uXCIsIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgbWV0aG9kOiBcInBvc3RcIlxuICB9KTtcbiAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCBjcmVhdGluZyB0aGUgd2FsbGV0IHJlcXVlc3RcIik7XG4gIH1cbn1cblxuLy8gc3JjL3RlbGVncmFtL2dldENsaWVudElkZW50aXR5S2V5LnRzXG5pbXBvcnQgeyBFZDI1NTE5UHJpdmF0ZUtleSB9IGZyb20gXCJAYXB0b3MtbGFicy90cy1zZGtcIjtcbnZhciBpZGVudGl0eUtleVN0b3JhZ2VLZXkgPSBcIkBhcHRvcy1jb25uZWN0L2NsaWVudC1pZGVudGl0eS1rZXlcIjtcbmZ1bmN0aW9uIGdldENsaWVudElkZW50aXR5S2V5KCkge1xuICBjb25zdCBzZXJpYWxpemVkID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKGlkZW50aXR5S2V5U3RvcmFnZUtleSk7XG4gIGlmIChzZXJpYWxpemVkKSB7XG4gICAgcmV0dXJuIG5ldyBFZDI1NTE5UHJpdmF0ZUtleShzZXJpYWxpemVkKTtcbiAgfVxuICBjb25zdCBpZGVudGl0eUtleSA9IEVkMjU1MTlQcml2YXRlS2V5LmdlbmVyYXRlKCk7XG4gIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShpZGVudGl0eUtleVN0b3JhZ2VLZXksIGlkZW50aXR5S2V5LnRvU3RyaW5nKCkpO1xuICByZXR1cm4gaWRlbnRpdHlLZXk7XG59XG5cbi8vIHNyYy90ZWxlZ3JhbS9nZXRXYWxsZXRSZXNwb25zZS50c1xuaW1wb3J0IHsgYmFzZTY0VG9CeXRlcyBhcyBiYXNlNjRUb0J5dGVzMiwgYnl0ZXNUb0Jhc2U2NHVybCBhcyBieXRlc1RvQmFzZTY0dXJsMiB9IGZyb20gXCJAYXB0b3MtY29ubmVjdC93YWxsZXQtYXBpXCI7XG5cbi8vIHNyYy90ZWxlZ3JhbS9zbWFydFBvbGxpbmcudHNcbnZhciBPTl9SRVNVTUVfREVMQVkgPSAzMDA7XG52YXIgRkdfUkVTUE9OU0VfUE9MTElOR19JTlRFUlZBTCA9IDJlMztcbnZhciBCR19SRVNQT05TRV9QT0xMSU5HX0lOVEVSVkFMID0gM2UzO1xudmFyIFBPTExJTkdfVElNRU9VVCA9IDUgKiA2ZTQ7XG5mdW5jdGlvbiB3YWl0Rm9yKG1pbGxpc2Vjb25kcykge1xuICBsZXQgdGltZW91dElkO1xuICBsZXQgY2FuY2VsID0gKCkgPT4ge1xuICB9O1xuICBjb25zdCB0aW1lciA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgdGltZW91dElkID0gc2V0VGltZW91dChyZXNvbHZlLCBtaWxsaXNlY29uZHMpO1xuICAgIGNhbmNlbCA9ICgpID0+IHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH07XG4gIH0pO1xuICB0aW1lci5jYW5jZWwgPSBjYW5jZWw7XG4gIHJldHVybiB0aW1lcjtcbn1cbmFzeW5jIGZ1bmN0aW9uIHNtYXJ0UG9sbGluZyhjYWxsYmFjaykge1xuICBsZXQgdGltZXI7XG4gIGxldCBqdXN0UmVzdW1lZCA9IGZhbHNlO1xuICBsZXQgcG9sbGluZ0ludGVydmFsID0gQkdfUkVTUE9OU0VfUE9MTElOR19JTlRFUlZBTDtcbiAgY29uc3Qgb25XaW5kb3dGb2N1cyA9ICgpID0+IHtcbiAgICBqdXN0UmVzdW1lZCA9IHRydWU7XG4gICAgcG9sbGluZ0ludGVydmFsID0gRkdfUkVTUE9OU0VfUE9MTElOR19JTlRFUlZBTDtcbiAgICB0aW1lcj8uY2FuY2VsKCk7XG4gIH07XG4gIGNvbnN0IG9uV2luZG93Qmx1ciA9ICgpID0+IHtcbiAgICBwb2xsaW5nSW50ZXJ2YWwgPSBCR19SRVNQT05TRV9QT0xMSU5HX0lOVEVSVkFMO1xuICB9O1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIG9uV2luZG93Rm9jdXMpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgb25XaW5kb3dCbHVyKTtcbiAgdHJ5IHtcbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHdoaWxlIChEYXRlLm5vdygpIC0gc3RhcnRUaW1lIDwgUE9MTElOR19USU1FT1VUKSB7XG4gICAgICB0aW1lciA9IHdhaXRGb3IocG9sbGluZ0ludGVydmFsKTtcbiAgICAgIGF3YWl0IHRpbWVyO1xuICAgICAgaWYgKGp1c3RSZXN1bWVkKSB7XG4gICAgICAgIHRpbWVyID0gd2FpdEZvcihPTl9SRVNVTUVfREVMQVkpO1xuICAgICAgICBhd2FpdCB0aW1lcjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2FsbGJhY2soKTtcbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICB9XG4gICAgICBqdXN0UmVzdW1lZCA9IGZhbHNlO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaW1lb3V0XCIpO1xuICB9IGZpbmFsbHkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgb25XaW5kb3dGb2N1cyk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIG9uV2luZG93Rm9jdXMpO1xuICB9XG59XG5cbi8vIHNyYy90ZWxlZ3JhbS9nZXRXYWxsZXRSZXNwb25zZS50c1xuYXN5bmMgZnVuY3Rpb24gZ2V0V2FsbGV0UmVzcG9uc2UoYmFzZVVybCwgY2xpZW50SWRlbnRpdHlLZXksIHJlcXVlc3RJZCkge1xuICBjb25zdCBlbmNvZGVkQ2xpZW50SWRlbnRpdHlLZXkgPSBieXRlc1RvQmFzZTY0dXJsMihjbGllbnRJZGVudGl0eUtleS50b1VpbnQ4QXJyYXkoKSk7XG4gIGNvbnN0IHVybCA9IG5ldyBVUkwoYCR7YmFzZVVybH0vdjEvZGFwcC9jbGllbnRzLyR7ZW5jb2RlZENsaWVudElkZW50aXR5S2V5fS9yZXF1ZXN0cy8ke3JlcXVlc3RJZH0vcmVzcG9uc2UvYCk7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgc21hcnRQb2xsaW5nKFxuICAgICgpID0+IGZldGNoKHVybCwge1xuICAgICAgaGVhZGVyczogeyBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgICBtZXRob2Q6IFwiZ2V0XCJcbiAgICB9KVxuICApO1xuICBjb25zdCByZXNwb25zZUJvZHkgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIGNvbnN0IGRhdGEgPSBiYXNlNjRUb0J5dGVzMihyZXNwb25zZUJvZHkuZGF0YS5ib2R5KTtcbiAgcmV0dXJuIHsgZGF0YSB9O1xufVxuXG4vLyBzcmMvdGVsZWdyYW0vb3BlblRlbGVncmFtUHJvbXB0LnRzXG5hc3luYyBmdW5jdGlvbiBvcGVuVGVsZWdyYW1Qcm9tcHQoYmFzZVVybCwgcmVxdWVzdCkge1xuICBjb25zdCBpZGVudGl0eUtleSA9IGdldENsaWVudElkZW50aXR5S2V5KCk7XG4gIGNvbnN0IGNsaWVudElkZW50aXR5S2V5ID0gaWRlbnRpdHlLZXkucHVibGljS2V5KCk7XG4gIGNvbnN0IHJlcXVlc3RJZCA9IHJhbmRvbVVVSUQoKTtcbiAgY29uc3QgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgY29uc3QgY2hhbGxlbmdlID0gbWFrZVBvcHVwV2FsbGV0UmVxdWVzdENoYWxsZW5nZSh7IGJvZHk6IHJlcXVlc3QsIGlkOiByZXF1ZXN0SWQsIHRpbWVzdGFtcCB9KTtcbiAgY29uc3Qgc2lnbmF0dXJlID0gaWRlbnRpdHlLZXkuc2lnbihjaGFsbGVuZ2UpO1xuICBjb25zdCBzaWduZWRXYWxsZXRSZXF1ZXN0ID0ge1xuICAgIGJvZHk6IHJlcXVlc3QsXG4gICAgY2xpZW50SWRlbnRpdHlLZXksXG4gICAgaWQ6IHJlcXVlc3RJZCxcbiAgICBzaWduYXR1cmUsXG4gICAgdGltZXN0YW1wXG4gIH07XG4gIGxldCBlbmNvZGVkUmVxdWVzdCA9IGVuY29kZVBvcHVwV2FsbGV0UmVxdWVzdChzaWduZWRXYWxsZXRSZXF1ZXN0KTtcbiAgaWYgKGVuY29kZWRSZXF1ZXN0Lmxlbmd0aCA+IDEwMjQpIHtcbiAgICB2b2lkIGNyZWF0ZVdhbGxldFJlcXVlc3QoYmFzZVVybCwgc2lnbmVkV2FsbGV0UmVxdWVzdCk7XG4gICAgZW5jb2RlZFJlcXVlc3QgPSBlbmNvZGVQb3B1cFdhbGxldFJlcXVlc3Qoe1xuICAgICAgY2xpZW50SWRlbnRpdHlLZXksXG4gICAgICBpZDogcmVxdWVzdElkLFxuICAgICAgc2lnbmF0dXJlLFxuICAgICAgdGltZXN0YW1wXG4gICAgfSk7XG4gIH1cbiAgcG9zdFRlbGVncmFtRXZlbnQoXCJ3ZWJfYXBwX29wZW5fdGdfbGlua1wiLCB7XG4gICAgcGF0aF9mdWxsOiBgL0FwdG9zQ29ubmVjdEJvdC9BcHRvc0Nvbm5lY3Q/c3RhcnRhcHA9JHtlbmNvZGVkUmVxdWVzdH1gXG4gIH0pO1xuICByZXR1cm4gZ2V0V2FsbGV0UmVzcG9uc2UoYmFzZVVybCwgY2xpZW50SWRlbnRpdHlLZXksIHJlcXVlc3RJZCk7XG59XG5cbi8vIHNyYy90ZWxlZ3JhbS9pbmRleC50c1xuZnVuY3Rpb24gaXNUZWxlZ3JhbU1pbmlBcHAoKSB7XG4gIHJldHVybiB3aW5kb3cuVGVsZWdyYW1XZWJ2aWV3UHJveHkgIT09IHZvaWQgMDtcbn1cblxuLy8gc3JjL2luZGV4LnRzXG52YXIgV2ViV2FsbGV0VHJhbnNwb3J0ID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihiYXNlVXJsLCBwcm92aWRlciA9IFwiZ29vZ2xlXCIpIHtcbiAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xuICAgIHRoaXMucHJvdmlkZXIgPSBwcm92aWRlcjtcbiAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xuICB9XG4gIGFzeW5jIHNlbmRQcm9tcHRSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICBpZiAoaXNUZWxlZ3JhbU1pbmlBcHAoKSkge1xuICAgICAgcmV0dXJuIG9wZW5UZWxlZ3JhbVByb21wdCh0aGlzLmJhc2VVcmwsIHJlcXVlc3QpO1xuICAgIH1cbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGAke3RoaXMuYmFzZVVybH0vcHJvbXB0L2ApO1xuICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KFwicmVxdWVzdFwiLCB1cmxFbmNvZGVXYWxsZXRSZXF1ZXN0KHJlcXVlc3QpKTtcbiAgICB1cmwuc2VhcmNoUGFyYW1zLnNldChcInByb3ZpZGVyXCIsIHRoaXMucHJvdmlkZXIpO1xuICAgIGNvbnN0IHByb21wdCA9IG9wZW5Qcm9tcHQodXJsKTtcbiAgICByZXR1cm4gd2FpdEZvclByb21wdFJlc3BvbnNlKHRoaXMuYmFzZVVybCwgcHJvbXB0KTtcbiAgfVxuICBhc3luYyBzZW5kUmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgc3dpdGNoIChyZXF1ZXN0Lm5hbWUpIHtcbiAgICAgIGNhc2UgSXNDb25uZWN0ZWRSZXF1ZXN0Lm5hbWU6IHtcbiAgICAgICAgY29uc3QgY29ubmVjdGVkQWNjb3VudHMgPSBnZXRDb25uZWN0ZWRBY2NvdW50cygpO1xuICAgICAgICByZXR1cm4gSXNDb25uZWN0ZWRSZXNwb25zZS5zZXJpYWxpemUoY29ubmVjdGVkQWNjb3VudHMubGVuZ3RoID4gMCk7XG4gICAgICB9XG4gICAgICBjYXNlIEdldENvbm5lY3RlZEFjY291bnRzUmVxdWVzdC5uYW1lOiB7XG4gICAgICAgIGNvbnN0IGNvbm5lY3RlZEFjY291bnRzID0gZ2V0Q29ubmVjdGVkQWNjb3VudHMoKTtcbiAgICAgICAgcmV0dXJuIEdldENvbm5lY3RlZEFjY291bnRzUmVzcG9uc2Uuc2VyaWFsaXplKGNvbm5lY3RlZEFjY291bnRzKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgQ29ubmVjdFJlcXVlc3QubmFtZToge1xuICAgICAgICBjb25zdCBzZXJpYWxpemVkUmVzcG9uc2UgPSBhd2FpdCB0aGlzLnNlbmRQcm9tcHRSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IENvbm5lY3RSZXNwb25zZTIuZGVzZXJpYWxpemUoc2VyaWFsaXplZFJlc3BvbnNlKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmFyZ3Muc3RhdHVzID09PSBcImFwcHJvdmVkXCIpIHtcbiAgICAgICAgICBjb25zdCB7IGFjY291bnQsIHBhaXJpbmcgfSA9IHJlc3BvbnNlLmFyZ3MuYXJncztcbiAgICAgICAgICBpZiAocGFpcmluZyA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBhZGRDb25uZWN0ZWRBY2NvdW50KGFjY291bnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VyaWFsaXplZFJlc3BvbnNlO1xuICAgICAgfVxuICAgICAgY2FzZSBEaXNjb25uZWN0UmVxdWVzdC5uYW1lOiB7XG4gICAgICAgIGNvbnN0IFthY3RpdmVBY2NvdW50XSA9IGdldENvbm5lY3RlZEFjY291bnRzKCk7XG4gICAgICAgIGlmIChhY3RpdmVBY2NvdW50KSB7XG4gICAgICAgICAgcmVtb3ZlQ29ubmVjdGVkQWNjb3VudChhY3RpdmVBY2NvdW50LmFkZHJlc3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBEaXNjb25uZWN0UmVzcG9uc2Uuc2VyaWFsaXplKHt9KTtcbiAgICAgIH1cbiAgICAgIGNhc2UgU2lnbk1lc3NhZ2VSZXF1ZXN0Lm5hbWU6XG4gICAgICBjYXNlIFNpZ25UcmFuc2FjdGlvblJlcXVlc3QubmFtZTpcbiAgICAgIGNhc2UgU2lnbkFuZFN1Ym1pdFRyYW5zYWN0aW9uUmVxdWVzdC5uYW1lOiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmRQcm9tcHRSZXF1ZXN0KHJlcXVlc3QpO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIHJlcXVlc3RcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuZXhwb3J0IHtcbiAgV2ViV2FsbGV0VHJhbnNwb3J0XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@aptos-connect+web-transport@0.1.0_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2._rbkqx4le5iilq7vcymgqhcdg6y/node_modules/@aptos-connect/web-transport/dist/index.mjs\n");

/***/ })

};
;