"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@aptos-connect+wallet-api@0.1.5_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2.0_aptos@1.21.0";
exports.ids = ["vendor-chunks/@aptos-connect+wallet-api@0.1.5_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2.0_aptos@1.21.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@aptos-connect+wallet-api@0.1.5_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2.0_aptos@1.21.0/node_modules/@aptos-connect/wallet-api/dist/index.mjs":
/*!*******************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@aptos-connect+wallet-api@0.1.5_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2.0_aptos@1.21.0/node_modules/@aptos-connect/wallet-api/dist/index.mjs ***!
  \*******************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AptosWalletErrorResponseMessage: () => (/* binding */ AptosWalletErrorResponseMessage),\n/* harmony export */   AptosWalletRequestMessage: () => (/* binding */ AptosWalletRequestMessage),\n/* harmony export */   AptosWalletSuccessResponseMessage: () => (/* binding */ AptosWalletSuccessResponseMessage),\n/* harmony export */   ConnectRequest: () => (/* binding */ ConnectRequest),\n/* harmony export */   ConnectResponse: () => (/* binding */ ConnectResponse),\n/* harmony export */   DisconnectRequest: () => (/* binding */ DisconnectRequest),\n/* harmony export */   DisconnectResponse: () => (/* binding */ DisconnectResponse),\n/* harmony export */   EntryFunctionArgumentVariant: () => (/* binding */ EntryFunctionArgumentVariant),\n/* harmony export */   GetConnectedAccountsRequest: () => (/* binding */ GetConnectedAccountsRequest),\n/* harmony export */   GetConnectedAccountsResponse: () => (/* binding */ GetConnectedAccountsResponse),\n/* harmony export */   IsConnectedRequest: () => (/* binding */ IsConnectedRequest),\n/* harmony export */   IsConnectedResponse: () => (/* binding */ IsConnectedResponse),\n/* harmony export */   PromptApprovalResponseMessage: () => (/* binding */ PromptApprovalResponseMessage),\n/* harmony export */   PromptOpenerPingRequestMessage: () => (/* binding */ PromptOpenerPingRequestMessage),\n/* harmony export */   PromptOpenerPingResponseMessage: () => (/* binding */ PromptOpenerPingResponseMessage),\n/* harmony export */   PromptUnauthorizedErrorMessage: () => (/* binding */ PromptUnauthorizedErrorMessage),\n/* harmony export */   SignAndSubmitTransactionRequest: () => (/* binding */ SignAndSubmitTransactionRequest),\n/* harmony export */   SignAndSubmitTransactionResponse: () => (/* binding */ SignAndSubmitTransactionResponse),\n/* harmony export */   SignMessageRequest: () => (/* binding */ SignMessageRequest),\n/* harmony export */   SignMessageResponse: () => (/* binding */ SignMessageResponse),\n/* harmony export */   SignTransactionRequest: () => (/* binding */ SignTransactionRequest),\n/* harmony export */   SignTransactionResponse: () => (/* binding */ SignTransactionResponse),\n/* harmony export */   TransactionPayloadInputVariant: () => (/* binding */ TransactionPayloadInputVariant),\n/* harmony export */   base64ToBytes: () => (/* binding */ base64ToBytes),\n/* harmony export */   base64urlToBytes: () => (/* binding */ base64urlToBytes),\n/* harmony export */   bytesToBase64: () => (/* binding */ bytesToBase64),\n/* harmony export */   bytesToBase64url: () => (/* binding */ bytesToBase64url),\n/* harmony export */   chainIdToNetwork: () => (/* binding */ chainIdToNetwork),\n/* harmony export */   decodePopupWalletRequest: () => (/* binding */ decodePopupWalletRequest),\n/* harmony export */   decodeWalletRequestBody: () => (/* binding */ decodeWalletRequestBody),\n/* harmony export */   deserializeAccountAuthenticatorInput: () => (/* binding */ deserializeAccountAuthenticatorInput),\n/* harmony export */   deserializeAccountInfo: () => (/* binding */ deserializeAccountInfo),\n/* harmony export */   deserializeAccountInput: () => (/* binding */ deserializeAccountInput),\n/* harmony export */   deserializeDappInfo: () => (/* binding */ deserializeDappInfo),\n/* harmony export */   deserializeEntryFunctionArgument: () => (/* binding */ deserializeEntryFunctionArgument),\n/* harmony export */   deserializePublicKey: () => (/* binding */ deserializePublicKey),\n/* harmony export */   deserializeSignature: () => (/* binding */ deserializeSignature),\n/* harmony export */   deserializeTransactionPayloadInput: () => (/* binding */ deserializeTransactionPayloadInput),\n/* harmony export */   deserializeWalletRequest: () => (/* binding */ deserializeWalletRequest),\n/* harmony export */   deserializeWalletRequestWithArgs: () => (/* binding */ deserializeWalletRequestWithArgs),\n/* harmony export */   deserializeWalletResponse: () => (/* binding */ deserializeWalletResponse),\n/* harmony export */   encodePopupWalletRequest: () => (/* binding */ encodePopupWalletRequest),\n/* harmony export */   encodeWalletRequestBody: () => (/* binding */ encodeWalletRequestBody),\n/* harmony export */   isAptosWalletResponseMessage: () => (/* binding */ isAptosWalletResponseMessage),\n/* harmony export */   isSupportedNetwork: () => (/* binding */ isSupportedNetwork),\n/* harmony export */   isTypedMessage: () => (/* binding */ isTypedMessage),\n/* harmony export */   makePopupWalletRequestChallenge: () => (/* binding */ makePopupWalletRequestChallenge),\n/* harmony export */   makeUserApproval: () => (/* binding */ makeUserApproval),\n/* harmony export */   makeUserResponseDeserializeFn: () => (/* binding */ makeUserResponseDeserializeFn),\n/* harmony export */   makeUserResponseSerializeFn: () => (/* binding */ makeUserResponseSerializeFn),\n/* harmony export */   serializeAccountAuthenticatorInput: () => (/* binding */ serializeAccountAuthenticatorInput),\n/* harmony export */   serializeAccountInfo: () => (/* binding */ serializeAccountInfo),\n/* harmony export */   serializeAccountInput: () => (/* binding */ serializeAccountInput),\n/* harmony export */   serializeDappInfo: () => (/* binding */ serializeDappInfo),\n/* harmony export */   serializeEntryFunctionArgument: () => (/* binding */ serializeEntryFunctionArgument),\n/* harmony export */   serializePublicKey: () => (/* binding */ serializePublicKey),\n/* harmony export */   serializeSignature: () => (/* binding */ serializeSignature),\n/* harmony export */   serializeTransactionPayloadInput: () => (/* binding */ serializeTransactionPayloadInput),\n/* harmony export */   serializeWalletRequest: () => (/* binding */ serializeWalletRequest),\n/* harmony export */   serializeWalletRequestWithArgs: () => (/* binding */ serializeWalletRequestWithArgs),\n/* harmony export */   serializeWalletResponse: () => (/* binding */ serializeWalletResponse),\n/* harmony export */   urlDecodeWalletRequest: () => (/* binding */ urlDecodeWalletRequest),\n/* harmony export */   urlEncodeWalletRequest: () => (/* binding */ urlEncodeWalletRequest)\n/* harmony export */ });\n/* harmony import */ var _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aptos-labs/ts-sdk */ \"(ssr)/./node_modules/.pnpm/@aptos-labs+ts-sdk@1.30.0/node_modules/@aptos-labs/ts-sdk/dist/esm/index.mjs\");\n// src/base64.ts\nfunction base64ToBytes(base64) {\n  const binaryString = atob(base64);\n  return Uint8Array.from(binaryString, (m) => m.charCodeAt(0));\n}\nfunction bytesToBase64(bytes) {\n  const binaryString = String.fromCharCode(...bytes);\n  return btoa(binaryString);\n}\nfunction base64urlToBytes(base64) {\n  return base64ToBytes(base64.replace(/-/g, \"+\").replace(/_/g, \"/\"));\n}\nfunction bytesToBase64url(bytes) {\n  return bytesToBase64(bytes).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n}\n\n// src/helpers.ts\n\nfunction chainIdToNetwork(chainId) {\n  switch (chainId) {\n    case _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.NetworkToChainId.mainnet:\n      return _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Network.MAINNET;\n    case _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.NetworkToChainId.testnet:\n      return _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Network.TESTNET;\n    default:\n      return _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Network.DEVNET;\n  }\n}\nfunction isSupportedNetwork(network) {\n  return [_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Network.MAINNET, _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Network.TESTNET, _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Network.DEVNET].includes(network);\n}\n\n// src/features/connect/request.ts\n\n\n// src/WalletRequest.ts\n\n\n// src/shared/AccountAuthenticatorInput.ts\n\nfunction serializeAccountAuthenticatorInput(serializer, value) {\n  serializer.serialize(value.address);\n  serializer.serialize(value.authenticator);\n}\nfunction deserializeAccountAuthenticatorInput(deserializer) {\n  const address = deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAddress);\n  const authenticator = deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAuthenticator);\n  return { address, authenticator };\n}\n\n// src/shared/AccountInfo.ts\n\n\n// src/shared/PublicKey.ts\n\nfunction serializePublicKey(serializer, value) {\n  if (value instanceof _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Ed25519PublicKey) {\n    serializer.serializeU32AsUleb128(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.SigningScheme.Ed25519);\n  } else if (value instanceof _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.MultiEd25519PublicKey) {\n    serializer.serializeU32AsUleb128(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.SigningScheme.MultiEd25519);\n  } else if (value instanceof _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AnyPublicKey) {\n    serializer.serializeU32AsUleb128(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.SigningScheme.SingleKey);\n  } else if (value instanceof _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.MultiKey) {\n    serializer.serializeU32AsUleb128(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.SigningScheme.MultiKey);\n  } else {\n    throw new Error(\"Unexpected public key type\");\n  }\n  serializer.serialize(value);\n}\nfunction deserializePublicKey(deserializer) {\n  const signingScheme = deserializer.deserializeUleb128AsU32();\n  switch (signingScheme) {\n    case _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.SigningScheme.Ed25519:\n      return deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Ed25519PublicKey);\n    case _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.SigningScheme.MultiEd25519:\n      return deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.MultiEd25519PublicKey);\n    case _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.SigningScheme.SingleKey:\n      return deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AnyPublicKey);\n    case _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.SigningScheme.MultiKey:\n      return deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.MultiKey);\n    default:\n      throw new Error(`Unknown signing scheme: ${signingScheme}`);\n  }\n}\n\n// src/shared/AccountInfo.ts\nfunction serializeAccountInfo(serializer, value) {\n  serializer.serialize(value.address);\n  serializePublicKey(serializer, value.publicKey);\n  serializer.serializeStr(value.name ?? \"\");\n}\nfunction deserializeAccountInfo(deserializer) {\n  const address = deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAddress);\n  const publicKey = deserializePublicKey(deserializer);\n  const name = deserializer.deserializeStr();\n  return {\n    address,\n    publicKey,\n    ...name.length > 0 ? { name } : void 0\n  };\n}\n\n// src/shared/AccountInput.ts\n\nfunction serializeAccountInput(serializer, value) {\n  serializer.serialize(value.address);\n  serializer.serializeBool(value.publicKey !== void 0);\n  if (value.publicKey) {\n    serializePublicKey(serializer, value.publicKey);\n  }\n}\nfunction deserializeAccountInput(deserializer) {\n  const address = deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAddress);\n  const hasPublicKey = deserializer.deserializeBool();\n  const publicKey = hasPublicKey ? deserializePublicKey(deserializer) : void 0;\n  return { address, publicKey };\n}\n\n// src/shared/DappInfo.ts\nfunction serializeDappInfo(serializer, value) {\n  serializer.serializeStr(value.domain);\n  serializer.serializeStr(value.name);\n  serializer.serializeBool(value.imageURI !== void 0);\n  if (value.imageURI !== void 0) {\n    serializer.serializeStr(value.imageURI);\n  }\n}\nfunction deserializeDappInfo(deserializer) {\n  const domain = deserializer.deserializeStr();\n  const name = deserializer.deserializeStr();\n  const hasImageUri = deserializer.deserializeBool();\n  const imageURI = hasImageUri ? deserializer.deserializeStr() : void 0;\n  return { domain, imageURI, name };\n}\n\n// src/shared/EntryFunctionArgument.ts\n\nvar EntryFunctionArgumentVariant = /* @__PURE__ */ ((EntryFunctionArgumentVariant2) => {\n  EntryFunctionArgumentVariant2[EntryFunctionArgumentVariant2[\"Undefined\"] = 0] = \"Undefined\";\n  EntryFunctionArgumentVariant2[EntryFunctionArgumentVariant2[\"Array\"] = 1] = \"Array\";\n  EntryFunctionArgumentVariant2[EntryFunctionArgumentVariant2[\"String\"] = 2] = \"String\";\n  EntryFunctionArgumentVariant2[EntryFunctionArgumentVariant2[\"Uint8Array\"] = 3] = \"Uint8Array\";\n  EntryFunctionArgumentVariant2[EntryFunctionArgumentVariant2[\"AccountAddress\"] = 4] = \"AccountAddress\";\n  EntryFunctionArgumentVariant2[EntryFunctionArgumentVariant2[\"FixedBytes\"] = 5] = \"FixedBytes\";\n  return EntryFunctionArgumentVariant2;\n})(EntryFunctionArgumentVariant || {});\nfunction serializeEntryFunctionArgument(serializer, argument) {\n  if (argument === void 0 || argument === null) {\n    serializer.serializeU32AsUleb128(0 /* Undefined */);\n    return;\n  }\n  if (Array.isArray(argument)) {\n    serializer.serializeU32AsUleb128(1 /* Array */);\n    serializer.serializeU32AsUleb128(argument.length);\n    for (const subArgument of argument) {\n      serializeEntryFunctionArgument(serializer, subArgument);\n    }\n    return;\n  }\n  if (typeof argument === \"string\" || typeof argument === \"number\" || typeof argument === \"boolean\" || typeof argument === \"bigint\") {\n    serializer.serializeU32AsUleb128(2 /* String */);\n    serializer.serializeStr(argument.toString());\n    return;\n  }\n  if (argument instanceof Uint8Array) {\n    serializer.serializeU32AsUleb128(3 /* Uint8Array */);\n    serializer.serializeBytes(argument);\n    return;\n  }\n  if (argument instanceof ArrayBuffer) {\n    serializer.serializeU32AsUleb128(3 /* Uint8Array */);\n    serializer.serializeBytes(new Uint8Array(argument));\n    return;\n  }\n  if (\"values\" in argument) {\n    serializer.serializeU32AsUleb128(1 /* Array */);\n    serializer.serializeU32AsUleb128(argument.values.length);\n    for (const subArgument of argument.values) {\n      serializeEntryFunctionArgument(serializer, subArgument);\n    }\n    return;\n  }\n  if (\"data\" in argument) {\n    serializer.serializeU32AsUleb128(4 /* AccountAddress */);\n    serializer.serialize(argument);\n    return;\n  }\n  if (argument.value === void 0) {\n    serializer.serializeU32AsUleb128(0 /* Undefined */);\n    serializer.serialize(argument);\n    return;\n  }\n  if (argument.value instanceof Uint8Array) {\n    serializer.serializeU32AsUleb128(5 /* FixedBytes */);\n    serializer.serializeBytes(argument.value);\n    return;\n  }\n  serializer.serializeU32AsUleb128(2 /* String */);\n  serializer.serializeStr(argument.value.toString());\n}\nfunction deserializeEntryFunctionArgument(deserializer) {\n  const variant = deserializer.deserializeUleb128AsU32();\n  switch (variant) {\n    case 0 /* Undefined */: {\n      return void 0;\n    }\n    case 1 /* Array */: {\n      const length = deserializer.deserializeUleb128AsU32();\n      const args = [];\n      for (let i = 0; i < length; i += 1) {\n        const argument = deserializeEntryFunctionArgument(deserializer);\n        args.push(argument);\n      }\n      return args;\n    }\n    case 3 /* Uint8Array */: {\n      return deserializer.deserializeBytes();\n    }\n    case 4 /* AccountAddress */: {\n      return deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAddress);\n    }\n    case 2 /* String */: {\n      return deserializer.deserializeStr();\n    }\n    case 5 /* FixedBytes */: {\n      const bytes = deserializer.deserializeBytes();\n      return new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.FixedBytes(bytes);\n    }\n    default: {\n      throw new Error(\"Unexpected variant\");\n    }\n  }\n}\n\n// src/shared/Signature.ts\n\nfunction serializeSignature(serializer, value) {\n  if (value instanceof _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Ed25519Signature) {\n    serializer.serializeU32AsUleb128(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.SigningScheme.Ed25519);\n  } else if (value instanceof _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.MultiEd25519Signature) {\n    serializer.serializeU32AsUleb128(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.SigningScheme.MultiEd25519);\n  } else if (value instanceof _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AnySignature) {\n    serializer.serializeU32AsUleb128(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.SigningScheme.SingleKey);\n  } else {\n    throw new Error(\"Unexpected signature type\");\n  }\n  serializer.serialize(value);\n}\nfunction deserializeSignature(deserializer) {\n  const signingScheme = deserializer.deserializeUleb128AsU32();\n  switch (signingScheme) {\n    case _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.SigningScheme.Ed25519:\n      return deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Ed25519Signature);\n    case _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.SigningScheme.MultiEd25519:\n      return deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.MultiEd25519Signature);\n    case _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.SigningScheme.SingleKey:\n      return deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AnySignature);\n    default:\n      throw new Error(`Unknown signing scheme: ${signingScheme}`);\n  }\n}\n\n// src/shared/TransactionPayloadInput.ts\n\nvar TransactionPayloadInputVariant = /* @__PURE__ */ ((TransactionPayloadInputVariant2) => {\n  TransactionPayloadInputVariant2[TransactionPayloadInputVariant2[\"EntryFunction\"] = 0] = \"EntryFunction\";\n  TransactionPayloadInputVariant2[TransactionPayloadInputVariant2[\"Script\"] = 1] = \"Script\";\n  TransactionPayloadInputVariant2[TransactionPayloadInputVariant2[\"Multisig\"] = 2] = \"Multisig\";\n  return TransactionPayloadInputVariant2;\n})(TransactionPayloadInputVariant || {});\nfunction serializeTypeArguments(serializer, typeArguments) {\n  serializer.serializeU32AsUleb128(typeArguments.length);\n  for (const typeArgument of typeArguments) {\n    const typeTag = typeof typeArgument === \"string\" ? (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.parseTypeTag)(typeArgument, { allowGenerics: true }) : typeArgument;\n    serializer.serialize(typeTag);\n  }\n}\nfunction deserializeTypeArguments(deserializer) {\n  const typeArguments = [];\n  const typeArgumentsLength = deserializer.deserializeUleb128AsU32();\n  for (let i = 0; i < typeArgumentsLength; i += 1) {\n    const typeTag = deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.TypeTag);\n    typeArguments.push(typeTag);\n  }\n  return typeArguments;\n}\nfunction serializeEntryFunctionArguments(serializer, functionArguments) {\n  serializer.serializeU32AsUleb128(functionArguments.length);\n  for (const functionArgument of functionArguments) {\n    serializeEntryFunctionArgument(serializer, functionArgument);\n  }\n}\nfunction deserializeEntryFunctionArguments(deserializer) {\n  const functionArgumentsLength = deserializer.deserializeUleb128AsU32();\n  const functionArguments = [];\n  for (let i = 0; i < functionArgumentsLength; i += 1) {\n    const functionArgument = deserializeEntryFunctionArgument(deserializer);\n    functionArguments.push(functionArgument);\n  }\n  return functionArguments;\n}\nfunction serializeTransactionPayloadInput(serializer, value) {\n  if (\"multisigAddress\" in value) {\n    serializer.serializeU32AsUleb128(2 /* Multisig */);\n    serializer.serializeStr(value.function);\n    serializeEntryFunctionArguments(serializer, value.functionArguments);\n    serializeTypeArguments(serializer, value.typeArguments ?? []);\n    const multisigAddress = _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAddress.from(value.multisigAddress);\n    serializer.serialize(multisigAddress);\n  } else if (\"function\" in value) {\n    serializer.serializeU32AsUleb128(0 /* EntryFunction */);\n    serializer.serializeStr(value.function);\n    serializeEntryFunctionArguments(serializer, value.functionArguments);\n    serializeTypeArguments(serializer, value.typeArguments ?? []);\n  } else {\n    serializer.serializeU32AsUleb128(1 /* Script */);\n    const bytecode = _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Hex.fromHexInput(value.bytecode);\n    serializer.serializeBytes(bytecode.toUint8Array());\n    serializer.serializeU32AsUleb128(value.functionArguments.length);\n    for (const argument of value.functionArguments) {\n      argument.serializeForScriptFunction(serializer);\n    }\n    serializeTypeArguments(serializer, value.typeArguments ?? []);\n  }\n}\nfunction deserializeTransactionPayloadInput(deserializer) {\n  const variant = deserializer.deserializeUleb128AsU32();\n  switch (variant) {\n    case 2 /* Multisig */: {\n      const functionId = deserializer.deserializeStr();\n      const functionArguments = deserializeEntryFunctionArguments(deserializer);\n      const typeArguments = deserializeTypeArguments(deserializer);\n      const multisigAddress = deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAddress);\n      return {\n        function: functionId,\n        functionArguments,\n        multisigAddress,\n        typeArguments\n      };\n    }\n    case 0 /* EntryFunction */: {\n      const functionId = deserializer.deserializeStr();\n      const functionArguments = deserializeEntryFunctionArguments(deserializer);\n      const typeArguments = deserializeTypeArguments(deserializer);\n      return {\n        function: functionId,\n        functionArguments,\n        typeArguments\n      };\n    }\n    case 1 /* Script */: {\n      const bytecode = deserializer.deserializeBytes();\n      const functionArgumentsLength = deserializer.deserializeUleb128AsU32();\n      const functionArguments = [];\n      for (let i = 0; i < functionArgumentsLength; i += 1) {\n        const argument = (0,_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.deserializeFromScriptArgument)(deserializer);\n        functionArguments.push(argument);\n      }\n      const typeArguments = deserializeTypeArguments(deserializer);\n      return {\n        bytecode,\n        functionArguments,\n        typeArguments\n      };\n    }\n    default: {\n      throw new Error(\"Unexpected variant\");\n    }\n  }\n}\n\n// src/WalletRequest.ts\nfunction serializeWalletRequest({\n  dappInfo,\n  name,\n  version\n}) {\n  const serializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Serializer();\n  serializeDappInfo(serializer, dappInfo);\n  const data = serializer.toUint8Array();\n  return { data, name, version };\n}\nfunction deserializeWalletRequest({\n  data,\n  name,\n  version\n}) {\n  const deserializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Deserializer(data);\n  const dappInfo = deserializeDappInfo(deserializer);\n  return { dappInfo, name, version };\n}\nfunction serializeWalletRequestWithArgs({ args, dappInfo, name, version }, serializeArgsFn) {\n  const serializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Serializer();\n  serializeDappInfo(serializer, dappInfo);\n  serializeArgsFn(serializer, args);\n  const data = serializer.toUint8Array();\n  return { data, name, version };\n}\nfunction deserializeWalletRequestWithArgs({ data, name, version }, deserializeArgsFn) {\n  const deserializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Deserializer(data);\n  const dappInfo = deserializeDappInfo(deserializer);\n  const args = deserializeArgsFn(deserializer);\n  return { args, dappInfo, name, version };\n}\n\n// src/features/connect/request.ts\nvar ConnectRequest;\n((ConnectRequest2) => {\n  ConnectRequest2.name = \"connect\";\n  ConnectRequest2.supportedVersions = [1, 2, 3, 4];\n  ConnectRequest2.currentVersion = 4;\n  function serializeArgs(serializer, value) {\n    serializer.serializeOptionStr(value.dappId);\n    serializer.serializeOptionStr(value.dappEd25519PublicKeyB64);\n    serializer.serializeOptionStr(value.preferredWalletName);\n    serializer.serializeBool(value.claimOptions !== void 0);\n    if (value.claimOptions) {\n      serializer.serialize(value.claimOptions.secretKey);\n      serializer.serializeStr(value.claimOptions.network);\n      serializer.serializeOptionStr(value.claimOptions.asset);\n      if (!isSupportedNetwork(value.claimOptions.network)) {\n        throw new Error(`Unsupported network '${value.claimOptions.network}'`);\n      }\n    }\n  }\n  ConnectRequest2.serializeArgs = serializeArgs;\n  function deserializeArgs(deserializer, version) {\n    if (version === 1) {\n      return {};\n    }\n    const dappId = deserializer.deserializeOptionStr();\n    const dappEd25519PublicKeyB64 = deserializer.deserializeOptionStr();\n    const preferredWalletName = version >= 3 ? deserializer.deserializeOptionStr() : void 0;\n    const hasClaimOptions = version >= 4 ? deserializer.deserializeBool() : false;\n    let claimOptions;\n    if (hasClaimOptions) {\n      const secretKey = deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Ed25519PrivateKey);\n      const network = deserializer.deserializeStr();\n      const asset = deserializer.deserializeOptionStr();\n      if (!isSupportedNetwork(network)) {\n        throw new Error(`Unsupported network '${network}'`);\n      }\n      claimOptions = { asset, network, secretKey };\n    }\n    return { claimOptions, dappEd25519PublicKeyB64, dappId, preferredWalletName };\n  }\n  ConnectRequest2.deserializeArgs = deserializeArgs;\n  function serialize(dappInfo, args = {}) {\n    return serializeWalletRequestWithArgs({ args, dappInfo, name: ConnectRequest2.name, version: ConnectRequest2.currentVersion }, serializeArgs);\n  }\n  ConnectRequest2.serialize = serialize;\n  function deserialize(request) {\n    return deserializeWalletRequestWithArgs(request, (d) => deserializeArgs(d, request.version));\n  }\n  ConnectRequest2.deserialize = deserialize;\n  function isSerialized(request) {\n    return request.name === ConnectRequest2.name && ConnectRequest2.supportedVersions.includes(request.version);\n  }\n  ConnectRequest2.isSerialized = isSerialized;\n})(ConnectRequest || (ConnectRequest = {}));\n\n// src/UserResponse.ts\nfunction makeUserApproval(args) {\n  return { args, status: \"approved\" };\n}\nfunction makeUserResponseSerializeFn(serializeArgs) {\n  return (serializer, value) => {\n    serializer.serializeBool(value.status === \"approved\");\n    if (value.status === \"approved\") {\n      serializeArgs(serializer, value.args);\n    }\n  };\n}\nfunction makeUserResponseDeserializeFn(deserializeArgs) {\n  return (deserializer) => {\n    const isApproved = deserializer.deserializeBool();\n    return isApproved ? { args: deserializeArgs(deserializer), status: \"approved\" } : { status: \"dismissed\" };\n  };\n}\n\n// src/WalletResponse.ts\n\nfunction serializeWalletResponse(args, serializeFn) {\n  const serializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Serializer();\n  serializeFn(serializer, args);\n  const data = serializer.toUint8Array();\n  return { data };\n}\nfunction deserializeWalletResponse({ data }, deserializeFn) {\n  const deserializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Deserializer(data);\n  const args = deserializeFn(deserializer);\n  return { args };\n}\n\n// src/features/connect/response.ts\nvar ConnectResponse;\n((ConnectResponse2) => {\n  ConnectResponse2.supportedVersions = [1, 2];\n  ConnectResponse2.currentVersion = 2;\n  function serializeApprovalArgsV1(serializer, value) {\n    serializeAccountInfo(serializer, value.account);\n  }\n  function serializeApprovalArgs(serializer, value) {\n    serializeAccountInfo(serializer, value.account);\n    serializer.serializeOptionStr(value.pairing !== void 0 ? JSON.stringify(value.pairing) : void 0);\n  }\n  function deserializeApprovalArgs(deserializer) {\n    const account = deserializeAccountInfo(deserializer);\n    const serializedPairing = deserializer.deserializeOptionStr();\n    const pairing = serializedPairing !== void 0 ? JSON.parse(serializedPairing) : void 0;\n    return { account, pairing };\n  }\n  const serializeArgsV1 = makeUserResponseSerializeFn(serializeApprovalArgsV1);\n  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);\n  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);\n  function serialize(args, version = ConnectResponse2.currentVersion) {\n    return serializeWalletResponse(args, version === 1 ? serializeArgsV1 : serializeArgs);\n  }\n  ConnectResponse2.serialize = serialize;\n  function deserialize(serializedResponse) {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n  ConnectResponse2.deserialize = deserialize;\n})(ConnectResponse || (ConnectResponse = {}));\n\n// src/features/disconnect/request.ts\nvar DisconnectRequest;\n((DisconnectRequest2) => {\n  DisconnectRequest2.name = \"disconnect\";\n  DisconnectRequest2.currentVersion = 1;\n  function serialize(dappInfo) {\n    return serializeWalletRequest({ dappInfo, name: DisconnectRequest2.name, version: DisconnectRequest2.currentVersion });\n  }\n  DisconnectRequest2.serialize = serialize;\n  function deserialize(request) {\n    return deserializeWalletRequest(request);\n  }\n  DisconnectRequest2.deserialize = deserialize;\n  function isSerialized(request) {\n    return request.name === DisconnectRequest2.name && request.version === DisconnectRequest2.currentVersion;\n  }\n  DisconnectRequest2.isSerialized = isSerialized;\n})(DisconnectRequest || (DisconnectRequest = {}));\n\n// src/features/disconnect/response.ts\nvar DisconnectResponse;\n((DisconnectResponse2) => {\n  function serialize(args) {\n    return serializeWalletResponse(args, () => {\n    });\n  }\n  DisconnectResponse2.serialize = serialize;\n  function deserialize(serializedResponse) {\n    return deserializeWalletResponse(serializedResponse, () => ({}));\n  }\n  DisconnectResponse2.deserialize = deserialize;\n})(DisconnectResponse || (DisconnectResponse = {}));\n\n// src/features/getConnectedAccounts/request.ts\nvar GetConnectedAccountsRequest;\n((GetConnectedAccountsRequest2) => {\n  GetConnectedAccountsRequest2.name = \"getConnectedAccounts\";\n  GetConnectedAccountsRequest2.currentVersion = 1;\n  function serialize(dappInfo) {\n    return serializeWalletRequest({ dappInfo, name: GetConnectedAccountsRequest2.name, version: GetConnectedAccountsRequest2.currentVersion });\n  }\n  GetConnectedAccountsRequest2.serialize = serialize;\n  function deserialize(request) {\n    return deserializeWalletRequest(request);\n  }\n  GetConnectedAccountsRequest2.deserialize = deserialize;\n  function isSerialized(request) {\n    return request.name === GetConnectedAccountsRequest2.name && request.version === GetConnectedAccountsRequest2.currentVersion;\n  }\n  GetConnectedAccountsRequest2.isSerialized = isSerialized;\n})(GetConnectedAccountsRequest || (GetConnectedAccountsRequest = {}));\n\n// src/features/getConnectedAccounts/response.ts\nvar GetConnectedAccountsResponse;\n((GetConnectedAccountsResponse2) => {\n  function serializeArgs(serializer, args) {\n    serializer.serializeU32AsUleb128(args.length);\n    for (const account of args) {\n      serializeAccountInfo(serializer, account);\n    }\n  }\n  function deserializeArgs(deserializer) {\n    const length = deserializer.deserializeUleb128AsU32();\n    const accounts = [];\n    for (let i = 0; i < length; i += 1) {\n      accounts.push(deserializeAccountInfo(deserializer));\n    }\n    return accounts;\n  }\n  function serialize(args) {\n    return serializeWalletResponse(args, serializeArgs);\n  }\n  GetConnectedAccountsResponse2.serialize = serialize;\n  function deserialize(serializedResponse) {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n  GetConnectedAccountsResponse2.deserialize = deserialize;\n})(GetConnectedAccountsResponse || (GetConnectedAccountsResponse = {}));\n\n// src/features/isConnected/request.ts\nvar IsConnectedRequest;\n((IsConnectedRequest2) => {\n  IsConnectedRequest2.name = \"isConnected\";\n  IsConnectedRequest2.currentVersion = 1;\n  function serialize(dappInfo) {\n    return serializeWalletRequest({ dappInfo, name: IsConnectedRequest2.name, version: IsConnectedRequest2.currentVersion });\n  }\n  IsConnectedRequest2.serialize = serialize;\n  function deserialize(request) {\n    return deserializeWalletRequest(request);\n  }\n  IsConnectedRequest2.deserialize = deserialize;\n  function isSerialized(request) {\n    return request.name === IsConnectedRequest2.name && request.version === IsConnectedRequest2.currentVersion;\n  }\n  IsConnectedRequest2.isSerialized = isSerialized;\n})(IsConnectedRequest || (IsConnectedRequest = {}));\n\n// src/features/isConnected/response.ts\nvar IsConnectedResponse;\n((IsConnectedResponse2) => {\n  function serializeArgs(serializer, value) {\n    serializer.serializeBool(value);\n  }\n  function deserializeArgs(deserializer) {\n    return deserializer.deserializeBool();\n  }\n  function serialize(args) {\n    return serializeWalletResponse(args, serializeArgs);\n  }\n  IsConnectedResponse2.serialize = serialize;\n  function deserialize(serializedResponse) {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n  IsConnectedResponse2.deserialize = deserialize;\n})(IsConnectedResponse || (IsConnectedResponse = {}));\n\n// src/features/signAndSubmitTransaction/request.ts\n\nvar SignAndSubmitTransactionRequest;\n((SignAndSubmitTransactionRequest2) => {\n  SignAndSubmitTransactionRequest2.name = \"signAndSubmitTransaction\";\n  SignAndSubmitTransactionRequest2.supportedVersions = [1, 2, 3];\n  SignAndSubmitTransactionRequest2.currentVersion = 3;\n  function serializeArgs(serializer, value) {\n    if (value.network !== void 0 && !isSupportedNetwork(value.network)) {\n      throw new Error(`Unsupported network '${value.network}'`);\n    }\n    serializer.serializeBool(value.signerAddress !== void 0);\n    if (value.signerAddress !== void 0) {\n      serializer.serialize(value.signerAddress);\n    }\n    serializer.serializeOptionStr(value.network);\n    if (\"bcsToBytes\" in value.payload) {\n      serializer.serializeBool(true);\n      serializer.serialize(value.payload);\n    } else {\n      serializer.serializeBool(false);\n      serializeTransactionPayloadInput(serializer, value.payload);\n    }\n    serializer.serializeU64(value.expirationTimestamp ?? 0);\n    serializer.serializeU32AsUleb128(value.gasUnitPrice ?? 0);\n    serializer.serializeU32AsUleb128(value.maxGasAmount ?? 0);\n    serializer.serializeU32AsUleb128(value.feePayer ? 1 : 0);\n    if (value.feePayer) {\n      serializeAccountAuthenticatorInput(serializer, value.feePayer);\n    }\n  }\n  SignAndSubmitTransactionRequest2.serializeArgs = serializeArgs;\n  function deserializeArgs(deserializer, version) {\n    const hasSignerAddress = version >= 3 && deserializer.deserializeBool();\n    const signerAddress = hasSignerAddress ? deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAddress) : void 0;\n    const network = version === 1 ? deserializer.deserializeStr() : deserializer.deserializeOptionStr();\n    if (network !== void 0 && !isSupportedNetwork(network)) {\n      throw new Error(`Unsupported network '${network}'`);\n    }\n    const isPayloadBcsSerializable = version === 1 || deserializer.deserializeBool();\n    const payload = isPayloadBcsSerializable ? deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.TransactionPayload) : deserializeTransactionPayloadInput(deserializer);\n    const expirationTimestamp = Number(deserializer.deserializeU64());\n    const gasUnitPrice = deserializer.deserializeUleb128AsU32();\n    const maxGasAmount = deserializer.deserializeUleb128AsU32();\n    const hasFeePayer = deserializer.deserializeUleb128AsU32();\n    const feePayer = hasFeePayer ? deserializeAccountAuthenticatorInput(deserializer) : void 0;\n    return {\n      expirationTimestamp: expirationTimestamp > 0 ? expirationTimestamp : void 0,\n      feePayer,\n      gasUnitPrice: gasUnitPrice > 0 ? gasUnitPrice : void 0,\n      maxGasAmount: maxGasAmount > 0 ? maxGasAmount : void 0,\n      network,\n      payload,\n      signerAddress\n    };\n  }\n  SignAndSubmitTransactionRequest2.deserializeArgs = deserializeArgs;\n  function serialize(dappInfo, args) {\n    const request = { args, dappInfo, name: SignAndSubmitTransactionRequest2.name, version: SignAndSubmitTransactionRequest2.currentVersion };\n    return serializeWalletRequestWithArgs(request, serializeArgs);\n  }\n  SignAndSubmitTransactionRequest2.serialize = serialize;\n  function deserialize(serializedRequest) {\n    return deserializeWalletRequestWithArgs(\n      serializedRequest,\n      (deserializer) => deserializeArgs(deserializer, serializedRequest.version)\n    );\n  }\n  SignAndSubmitTransactionRequest2.deserialize = deserialize;\n  function isSerialized(request) {\n    return request.name === SignAndSubmitTransactionRequest2.name && SignAndSubmitTransactionRequest2.supportedVersions.includes(request.version);\n  }\n  SignAndSubmitTransactionRequest2.isSerialized = isSerialized;\n})(SignAndSubmitTransactionRequest || (SignAndSubmitTransactionRequest = {}));\n\n// src/features/signAndSubmitTransaction/response.ts\nvar SignAndSubmitTransactionResponse;\n((SignAndSubmitTransactionResponse2) => {\n  function serializeApprovalArgs(serializer, value) {\n    serializer.serializeStr(value.txnHash);\n  }\n  function deserializeApprovalArgs(deserializer) {\n    const txnHash = deserializer.deserializeStr();\n    return { txnHash };\n  }\n  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);\n  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);\n  function serialize(args) {\n    return serializeWalletResponse(args, serializeArgs);\n  }\n  SignAndSubmitTransactionResponse2.serialize = serialize;\n  function deserialize(serializedResponse) {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n  SignAndSubmitTransactionResponse2.deserialize = deserialize;\n})(SignAndSubmitTransactionResponse || (SignAndSubmitTransactionResponse = {}));\n\n// src/features/signMessage/request.ts\n\nvar SignMessageRequest;\n((SignMessageRequest2) => {\n  SignMessageRequest2.name = \"signMessage\";\n  SignMessageRequest2.supportedVersions = [1, 2];\n  SignMessageRequest2.currentVersion = 2;\n  function serializeArgs(serializer, value) {\n    serializer.serializeBool(value.signerAddress !== void 0);\n    if (value.signerAddress !== void 0) {\n      serializer.serialize(value.signerAddress);\n    }\n    serializer.serializeU8(value.chainId);\n    serializer.serializeBytes(value.nonce);\n    serializer.serializeBytes(value.message);\n  }\n  function deserializeArgs(deserializer, version) {\n    const hasSignerAddress = version >= 2 && deserializer.deserializeBool();\n    const signerAddress = hasSignerAddress ? deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAddress) : void 0;\n    const chainId = deserializer.deserializeU8();\n    const nonce = deserializer.deserializeBytes();\n    const message = deserializer.deserializeBytes();\n    return { chainId, message, nonce, signerAddress };\n  }\n  function serialize(dappInfo, args) {\n    const request = { args, dappInfo, name: SignMessageRequest2.name, version: SignMessageRequest2.currentVersion };\n    return serializeWalletRequestWithArgs(request, serializeArgs);\n  }\n  SignMessageRequest2.serialize = serialize;\n  function deserialize(serializedRequest) {\n    return deserializeWalletRequestWithArgs(serializedRequest, (d) => deserializeArgs(d, serializedRequest.version));\n  }\n  SignMessageRequest2.deserialize = deserialize;\n  function isSerialized(request) {\n    return request.name === SignMessageRequest2.name && request.version === SignMessageRequest2.currentVersion;\n  }\n  SignMessageRequest2.isSerialized = isSerialized;\n})(SignMessageRequest || (SignMessageRequest = {}));\n\n// src/features/signMessage/response.ts\nvar SignMessageResponse;\n((SignMessageResponse2) => {\n  function serializeApprovalArgs(serializer, value) {\n    serializer.serializeStr(value.fullMessage);\n    serializeSignature(serializer, value.signature);\n  }\n  function deserializeApprovalArgs(deserializer) {\n    const fullMessage = deserializer.deserializeStr();\n    const signature = deserializeSignature(deserializer);\n    return { fullMessage, signature };\n  }\n  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);\n  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);\n  function serialize(args) {\n    return serializeWalletResponse(args, serializeArgs);\n  }\n  SignMessageResponse2.serialize = serialize;\n  function deserialize(serializedResponse) {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n  SignMessageResponse2.deserialize = deserialize;\n})(SignMessageResponse || (SignMessageResponse = {}));\n\n// src/features/signTransaction/request.ts\n\nvar SignTransactionRequest;\n((SignTransactionRequest2) => {\n  SignTransactionRequest2.name = \"signTransaction\";\n  SignTransactionRequest2.supportedVersions = [1, 2, 3, 4];\n  SignTransactionRequest2.currentVersion = 4;\n  function normalizeArgs(args) {\n    const { feePayer, secondarySigners, senderPublicKey, signerAddress, transaction } = args;\n    const sender = {\n      address: transaction.sender,\n      publicKey: senderPublicKey\n    };\n    const network = chainIdToNetwork(args.transaction.chain_id.chainId);\n    return {\n      expirationTimestamp: Number(transaction.expiration_timestamp_secs),\n      feePayer,\n      gasUnitPrice: Number(transaction.gas_unit_price),\n      maxGasAmount: Number(transaction.max_gas_amount),\n      network,\n      payload: transaction.payload,\n      secondarySigners,\n      sender,\n      signerAddress\n    };\n  }\n  SignTransactionRequest2.normalizeArgs = normalizeArgs;\n  function serializeArgs(serializer, value) {\n    if (value.network !== void 0 && !isSupportedNetwork(value.network)) {\n      throw new Error(`Unsupported network '${value.network}'`);\n    }\n    serializer.serializeBool(value.signerAddress !== void 0);\n    if (value.signerAddress !== void 0) {\n      serializer.serialize(value.signerAddress);\n    }\n    serializer.serializeOptionStr(value.network);\n    serializer.serializeBool(value.sender !== void 0);\n    if (value.sender !== void 0) {\n      serializeAccountInput(serializer, value.sender);\n    }\n    if (\"bcsToBytes\" in value.payload) {\n      serializer.serializeBool(true);\n      serializer.serialize(value.payload);\n    } else {\n      serializer.serializeBool(false);\n      serializeTransactionPayloadInput(serializer, value.payload);\n    }\n    serializer.serializeU32AsUleb128(value.expirationSecondsFromNow ?? 0);\n    serializer.serializeU64(value.expirationTimestamp ?? 0);\n    serializer.serializeU32AsUleb128(value.gasUnitPrice ?? 0);\n    serializer.serializeU32AsUleb128(value.maxGasAmount ?? 0);\n    serializer.serializeBool(value.feePayer !== void 0);\n    if (value.feePayer !== void 0) {\n      serializeAccountInput(serializer, value.feePayer);\n    }\n    const secondarySigners = value.secondarySigners ?? [];\n    serializer.serializeU32AsUleb128(secondarySigners.length);\n    for (const signer of secondarySigners) {\n      serializeAccountInput(serializer, signer);\n    }\n  }\n  function deserializeArgs(deserializer, version) {\n    const hasSignerAddress = version >= 3 && deserializer.deserializeBool();\n    const signerAddress = hasSignerAddress ? deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAddress) : void 0;\n    const network = version === 1 ? deserializer.deserializeStr() : deserializer.deserializeOptionStr();\n    if (network !== void 0 && !isSupportedNetwork(network)) {\n      throw new Error(`Unsupported network '${network}'`);\n    }\n    const hasSender = deserializer.deserializeBool();\n    const sender = hasSender ? deserializeAccountInput(deserializer) : void 0;\n    const isPayloadBcsSerializable = version < 4 || deserializer.deserializeBool();\n    const payload = isPayloadBcsSerializable ? deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.TransactionPayload) : deserializeTransactionPayloadInput(deserializer);\n    const expirationSecondsFromNow = deserializer.deserializeUleb128AsU32();\n    const expirationTimestamp = Number(deserializer.deserializeU64());\n    const gasUnitPrice = deserializer.deserializeUleb128AsU32();\n    const maxGasAmount = deserializer.deserializeUleb128AsU32();\n    const hasFeePayer = deserializer.deserializeBool();\n    const feePayer = hasFeePayer ? deserializeAccountInput(deserializer) : void 0;\n    const secondarySignersLength = deserializer.deserializeUleb128AsU32();\n    const secondarySigners = [];\n    for (let i = 0; i < secondarySignersLength; i += 1) {\n      secondarySigners.push(deserializeAccountInput(deserializer));\n    }\n    return {\n      expirationSecondsFromNow: expirationSecondsFromNow > 0 ? expirationSecondsFromNow : void 0,\n      expirationTimestamp: expirationTimestamp > 0 ? expirationTimestamp : void 0,\n      feePayer,\n      gasUnitPrice: gasUnitPrice > 0 ? gasUnitPrice : void 0,\n      maxGasAmount: maxGasAmount > 0 ? maxGasAmount : void 0,\n      network,\n      payload,\n      secondarySigners,\n      sender,\n      signerAddress\n    };\n  }\n  function serialize(dappInfo, args) {\n    const request = { args, dappInfo, name: SignTransactionRequest2.name, version: SignTransactionRequest2.currentVersion };\n    return serializeWalletRequestWithArgs(request, serializeArgs);\n  }\n  SignTransactionRequest2.serialize = serialize;\n  function deserialize(serializedRequest) {\n    return deserializeWalletRequestWithArgs(\n      serializedRequest,\n      (deserializer) => deserializeArgs(deserializer, serializedRequest.version)\n    );\n  }\n  SignTransactionRequest2.deserialize = deserialize;\n  function isSerialized(request) {\n    return request.name === SignTransactionRequest2.name && SignTransactionRequest2.supportedVersions.includes(request.version);\n  }\n  SignTransactionRequest2.isSerialized = isSerialized;\n})(SignTransactionRequest || (SignTransactionRequest = {}));\n\n// src/features/signTransaction/response.ts\n\nvar SignTransactionResponse;\n((SignTransactionResponse2) => {\n  function serializeApprovalArgs(serializer, value) {\n    serializer.serialize(value.authenticator);\n    serializer.serializeBool(value.rawTransaction !== void 0);\n    if (value.rawTransaction !== void 0) {\n      serializer.serialize(value.rawTransaction);\n    }\n  }\n  function deserializeApprovalArgs(deserializer) {\n    const authenticator = deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAuthenticator);\n    const hasRawTransaction = deserializer.deserializeBool();\n    const rawTransaction = hasRawTransaction ? deserializer.deserialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.RawTransaction) : void 0;\n    return {\n      authenticator,\n      rawTransaction\n    };\n  }\n  const serializeArgs = makeUserResponseSerializeFn(serializeApprovalArgs);\n  const deserializeArgs = makeUserResponseDeserializeFn(deserializeApprovalArgs);\n  function serialize(args) {\n    return serializeWalletResponse(args, serializeArgs);\n  }\n  SignTransactionResponse2.serialize = serialize;\n  function deserialize(serializedResponse) {\n    return deserializeWalletResponse(serializedResponse, deserializeArgs);\n  }\n  SignTransactionResponse2.deserialize = deserialize;\n})(SignTransactionResponse || (SignTransactionResponse = {}));\n\n// src/messages/common.ts\nfunction isTypedMessage(messageCls, message) {\n  return message?.__messageType === messageCls.TYPE;\n}\n\n// src/messages/background.ts\nvar _AptosWalletRequestMessage = class _AptosWalletRequestMessage {\n  constructor(nonce, serializedValue) {\n    this.nonce = nonce;\n    this.serializedValue = serializedValue;\n    this.__messageType = _AptosWalletRequestMessage.TYPE;\n  }\n};\n_AptosWalletRequestMessage.TYPE = \"AptosWalletRequest\";\nvar AptosWalletRequestMessage = _AptosWalletRequestMessage;\nvar _AptosWalletSuccessResponseMessage = class _AptosWalletSuccessResponseMessage {\n  constructor(serializedValue, nonce) {\n    this.serializedValue = serializedValue;\n    this.nonce = nonce;\n    this.__messageType = _AptosWalletSuccessResponseMessage.TYPE;\n  }\n};\n_AptosWalletSuccessResponseMessage.TYPE = \"AptosWalletSuccessResponseMessage\";\nvar AptosWalletSuccessResponseMessage = _AptosWalletSuccessResponseMessage;\nvar _AptosWalletErrorResponseMessage = class _AptosWalletErrorResponseMessage {\n  constructor(error, nonce) {\n    this.error = error;\n    this.nonce = nonce;\n    this.__messageType = _AptosWalletErrorResponseMessage.TYPE;\n  }\n};\n_AptosWalletErrorResponseMessage.TYPE = \"AptosWalletErrorResponseMessage\";\nvar AptosWalletErrorResponseMessage = _AptosWalletErrorResponseMessage;\nfunction isAptosWalletResponseMessage(message) {\n  return isTypedMessage(AptosWalletSuccessResponseMessage, message) || isTypedMessage(AptosWalletErrorResponseMessage, message);\n}\n\n// src/messages/prompt.ts\n\nvar _PromptOpenerPingRequestMessage = class _PromptOpenerPingRequestMessage {\n  constructor() {\n    this.__messageType = _PromptOpenerPingRequestMessage.TYPE;\n  }\n};\n_PromptOpenerPingRequestMessage.TYPE = \"PromptOpenerPingRequest\";\nvar PromptOpenerPingRequestMessage = _PromptOpenerPingRequestMessage;\nvar _PromptOpenerPingResponseMessage = class _PromptOpenerPingResponseMessage {\n  constructor() {\n    this.__messageType = _PromptOpenerPingResponseMessage.TYPE;\n  }\n};\n_PromptOpenerPingResponseMessage.TYPE = \"PromptOpenerPingResponse\";\nvar PromptOpenerPingResponseMessage = _PromptOpenerPingResponseMessage;\nvar _PromptApprovalResponseMessage = class _PromptApprovalResponseMessage {\n  constructor(serializedValue) {\n    this.serializedValue = serializedValue;\n    this.__messageType = _PromptApprovalResponseMessage.TYPE;\n  }\n};\n_PromptApprovalResponseMessage.TYPE = \"PromptApprovalResponse\";\nvar PromptApprovalResponseMessage = _PromptApprovalResponseMessage;\nvar _PromptUnauthorizedErrorMessage = class _PromptUnauthorizedErrorMessage {\n  constructor() {\n    this.__messageType = _PromptUnauthorizedErrorMessage.TYPE;\n  }\n};\n_PromptUnauthorizedErrorMessage.TYPE = \"PromptUnauthorizedError\";\nvar PromptUnauthorizedErrorMessage = _PromptUnauthorizedErrorMessage;\nfunction urlEncodeWalletRequest(request) {\n  const serializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Serializer();\n  serializer.serializeStr(request.name);\n  serializer.serializeBytes(request.data);\n  serializer.serializeStr(request.version.toString());\n  return bytesToBase64(serializer.toUint8Array());\n}\nfunction urlDecodeWalletRequest(encodedRequest) {\n  const deserializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Deserializer(base64ToBytes(encodedRequest));\n  const name = deserializer.deserializeStr();\n  const data = deserializer.deserializeBytes();\n  let version;\n  try {\n    version = Number(deserializer.deserializeStr());\n  } catch {\n    version = 1;\n  }\n  return { data, name, version };\n}\n\n// src/PopupWalletRequest.ts\n\n\n// src/WalletRequestBody.ts\nfunction encodeWalletRequestBody({ data, ...rest }) {\n  const serialized = JSON.stringify({ data, ...rest }, (key, value) => key === \"data\" ? bytesToBase64(value) : value);\n  const utf8Encoded = new TextEncoder().encode(serialized);\n  return bytesToBase64(utf8Encoded);\n}\nfunction decodeWalletRequestBody(encoded) {\n  const utfEncoded = base64ToBytes(encoded);\n  const serialized = new TextDecoder().decode(utfEncoded);\n  return JSON.parse(serialized, (key, value) => key === \"data\" ? base64ToBytes(value) : value);\n}\n\n// src/PopupWalletRequest.ts\nfunction encodePopupWalletRequest(request) {\n  const serialized = JSON.stringify(request, (key, value) => {\n    switch (key) {\n      case \"body\":\n        return encodeWalletRequestBody(value);\n      case \"clientIdentityKey\":\n        return bytesToBase64(value.toUint8Array());\n      case \"signature\":\n        return bytesToBase64(value.toUint8Array());\n      default:\n        return value;\n    }\n  });\n  const utf8Encoded = new TextEncoder().encode(serialized);\n  return bytesToBase64url(utf8Encoded);\n}\nfunction decodePopupWalletRequest(encoded) {\n  const utfEncoded = base64urlToBytes(encoded);\n  const serialized = new TextDecoder().decode(utfEncoded);\n  return JSON.parse(serialized, (key, value) => {\n    switch (key) {\n      case \"body\":\n        return decodeWalletRequestBody(value);\n      case \"clientIdentityKey\":\n        return new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Ed25519PublicKey(base64ToBytes(value));\n      case \"signature\":\n        return new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Ed25519Signature(base64ToBytes(value));\n      default:\n        return value;\n    }\n  });\n}\nfunction makePopupWalletRequestChallenge({\n  accountAddress,\n  body,\n  id,\n  timestamp\n}) {\n  const serializer = new _aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.Serializer();\n  serializer.serializeStr(\"SignedPopupWalletRequest\");\n  serializer.serializeStr(id);\n  serializer.serializeU64(timestamp);\n  serializer.serializeBool(accountAddress !== void 0);\n  if (accountAddress !== void 0) {\n    serializer.serialize(_aptos_labs_ts_sdk__WEBPACK_IMPORTED_MODULE_0__.AccountAddress.from(accountAddress));\n  }\n  serializer.serializeStr(body.name);\n  serializer.serializeU8(body.version);\n  serializer.serializeBytes(body.data);\n  return serializer.toUint8Array();\n}\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@aptos-connect+wallet-api@0.1.5_@aptos-labs+ts-sdk@1.30.0_@aptos-labs+wallet-standard@0.2.0_aptos@1.21.0/node_modules/@aptos-connect/wallet-api/dist/index.mjs\n");

/***/ })

};
;